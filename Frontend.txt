================================================================================
File: .editorconfig
Size: 290 B
================================================================================

# Editor configuration, see https://editorconfig.org
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

[*.ts]
quote_type = single

[*.md]
max_line_length = off
trim_trailing_whitespace = false


================================================================================
File: .vscode\extensions.json
Size: 134 B
================================================================================

{
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=827846
  "recommendations": ["angular.ng-template"]
}


================================================================================
File: .vscode\launch.json
Size: 494 B
================================================================================

{
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "configurations": [
    {
      "name": "ng serve",
      "type": "pwa-chrome",
      "request": "launch",
      "preLaunchTask": "npm: start",
      "url": "http://localhost:4200/"
    },
    {
      "name": "ng test",
      "type": "chrome",
      "request": "launch",
      "preLaunchTask": "npm: test",
      "url": "http://localhost:9876/debug.html"
    }
  ]
}


================================================================================
File: .vscode\tasks.json
Size: 980 B
================================================================================

{
  // For more information, visit: https://go.microsoft.com/fwlink/?LinkId=733558
  "version": "2.0.0",
  "tasks": [
    {
      "type": "npm",
      "script": "start",
      "isBackground": true,
      "problemMatcher": {
        "owner": "typescript",
        "pattern": "$tsc",
        "background": {
          "activeOnStart": true,
          "beginsPattern": {
            "regexp": "(.*?)"
          },
          "endsPattern": {
            "regexp": "bundle generation complete"
          }
        }
      }
    },
    {
      "type": "npm",
      "script": "test",
      "isBackground": true,
      "problemMatcher": {
        "owner": "typescript",
        "pattern": "$tsc",
        "background": {
          "activeOnStart": true,
          "beginsPattern": {
            "regexp": "(.*?)"
          },
          "endsPattern": {
            "regexp": "bundle generation complete"
          }
        }
      }
    }
  ]
}


================================================================================
File: angular.json
Size: 3.34 kB
================================================================================

{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "newProjectRoot": "projects",
  "projects": {
    "angular-15-example": {
      "projectType": "application",
      "schematics": {
        "@schematics/angular:component": {
          "style": "less"
        }
      },
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:browser",
          "options": {
            "outputPath": "dist/angular-15-example",
            "index": "src/index.html",
            "main": "src/main.ts",
            "polyfills": "src/polyfills.ts",
            "tsConfig": "tsconfig.app.json",
            "inlineStyleLanguage": "less",
            "assets": [
              "src/favicon.ico",
              "src/assets"
            ],
            "styles": [
              "src/styles.less"
            ],
            "scripts": []
          },
          "configurations": {
            "production": {
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "500kb",
                  "maximumError": "1mb"
                },
                {
                  "type": "anyComponentStyle",
                  "maximumWarning": "2kb",
                  "maximumError": "4kb"
                }
              ],
              "fileReplacements": [
                {
                  "replace": "src/environments/environment.ts",
                  "with": "src/environments/environment.prod.ts"
                }
              ],
              "outputHashing": "all"
            },
            "development": {
              "buildOptimizer": false,
              "optimization": false,
              "vendorChunk": true,
              "extractLicenses": false,
              "sourceMap": true,
              "namedChunks": true
            }
          },
          "defaultConfiguration": "production"
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "configurations": {
            "production": {
              "browserTarget": "angular-15-example:build:production"
            },
            "development": {
              "browserTarget": "angular-15-example:build:development"
            }
          },
          "defaultConfiguration": "development"
        },
        "extract-i18n": {
          "builder": "@angular-devkit/build-angular:extract-i18n",
          "options": {
            "browserTarget": "angular-15-example:build"
          }
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "main": "src/test.ts",
            "polyfills": "src/polyfills.ts",
            "tsConfig": "tsconfig.spec.json",
            "karmaConfig": "karma.conf.js",
            "inlineStyleLanguage": "less",
            "assets": [
              "src/favicon.ico",
              "src/assets"
            ],
            "styles": [
              "src/styles.less"
            ],
            "scripts": []
          }
        }
      }
    }
  },
  "cli": {
    "analytics": "b55b8aad-3a7d-4e61-920a-6f28b982a326"
  }
}


================================================================================
File: karma.conf.js
Size: 1.48 kB
================================================================================

// Karma configuration file, see link for more information
// https://karma-runner.github.io/1.0/config/configuration-file.html

module.exports = function (config) {
  config.set({
    basePath: '',
    frameworks: ['jasmine', '@angular-devkit/build-angular'],
    plugins: [
      require('karma-jasmine'),
      require('karma-chrome-launcher'),
      require('karma-jasmine-html-reporter'),
      require('karma-coverage'),
      require('@angular-devkit/build-angular/plugins/karma')
    ],
    client: {
      jasmine: {
        // you can add configuration options for Jasmine here
        // the possible options are listed at https://jasmine.github.io/api/edge/Configuration.html
        // for example, you can disable the random execution with `random: false`
        // or set a specific seed with `seed: 4321`
      },
      clearContext: false // leave Jasmine Spec Runner output visible in browser
    },
    jasmineHtmlReporter: {
      suppressAll: true // removes the duplicated traces
    },
    coverageReporter: {
      dir: require('path').join(__dirname, './coverage/angular-15-example'),
      subdir: '.',
      reporters: [
        { type: 'html' },
        { type: 'text-summary' }
      ]
    },
    reporters: ['progress', 'kjhtml'],
    port: 9876,
    colors: true,
    logLevel: config.LOG_INFO,
    autoWatch: true,
    browsers: ['Chrome'],
    singleRun: false,
    restartOnFileChange: true
  });
};


================================================================================
File: LICENSE
Size: 1.1 kB
================================================================================

The MIT License (MIT)

Copyright (c) 2023 Jason Watmore

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


================================================================================
File: package.json
Size: 1.51 kB
================================================================================

{
    "name": "angular-15-example",
    "version": "0.0.0",
    "scripts": {
        "ng": "ng",
        "start": "ng serve --open",
        "build": "ng build",
        "watch": "ng build --watch --configuration development",
        "test": "ng test",
        "export:all": "folder2txt --output Frontend.txt C:/Users/Kenith Labonite/Frontend/group-project-repo --exclude node_modules --exclude .vscode --exclude .git --exclude .angular --exclude .DS_Store --exclude *.log"
    },
    "private": true,
    "dependencies": {
        "@angular/animations": "^15.0.0",
        "@angular/common": "^15.0.0",
        "@angular/compiler": "^15.0.0",
        "@angular/core": "^15.0.0",
        "@angular/forms": "^15.0.0",
        "@angular/platform-browser": "^15.0.0",
        "@angular/platform-browser-dynamic": "^15.0.0",
        "@angular/router": "^15.0.0",
        "folder2txt": "^1.0.2",
        "rxjs": "~7.5.0",
        "sweetalert2": "^11.23.0",
        "tslib": "^2.3.0",
        "zone.js": "~0.12.0"
    },
    "devDependencies": {
        "@angular-devkit/build-angular": "^15.0.1",
        "@angular/cli": "~15.0.1",
        "@angular/compiler-cli": "^15.0.0",
        "@types/jasmine": "~4.3.0",
        "jasmine-core": "~4.5.0",
        "karma": "~6.4.0",
        "karma-chrome-launcher": "~3.1.0",
        "karma-coverage": "~2.2.0",
        "karma-jasmine": "~5.1.0",
        "karma-jasmine-html-reporter": "~2.0.0",
        "typescript": "~4.8.2"
    }
}


================================================================================
File: src\app\account\account-routing.module.ts
Size: 1.19 kB
================================================================================

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { LayoutComponent } from './layout.component';
import { LoginComponent } from './login.component';
import { RegisterComponent } from './register.component';
import { VerifyEmailComponent } from './verify-email.component';
import { ForgotPasswordComponent } from './forgot-password.component';
import { ResetPasswordComponent } from './reset-password.component';
import { AccountComponent } from './account.component'; // ✅ new import

const routes: Routes = [
  {
    path: '', component: LayoutComponent,
    children: [
      { path: '', component: AccountComponent },  // ✅ shows AccountComponent
      { path: 'login', component: LoginComponent },
      { path: 'register', component: RegisterComponent },
      { path: 'verify-email', component: VerifyEmailComponent },
      { path: 'forgot-password', component: ForgotPasswordComponent },
      { path: 'reset-password', component: ResetPasswordComponent }
    ]
  }
];


@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class AccountRoutingModule { }


================================================================================
File: src\app\account\account.component.html
Size: 95 B
================================================================================

<h1>Account Page</h1>
<p>Welcome to the Account section. Manage your account details here.</p>

================================================================================
File: src\app\account\account.component.ts
Size: 169 B
================================================================================

import { Component } from '@angular/core';

@Component({
  selector: 'app-account',
  templateUrl: './account.component.html'
})
export class AccountComponent {}


================================================================================
File: src\app\account\account.module.ts
Size: 1.05 kB
================================================================================

import { NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

import { AccountRoutingModule } from './account-routing.module';
import { LayoutComponent } from './layout.component';
import { LoginComponent } from './login.component';
import { RegisterComponent } from './register.component';
import { VerifyEmailComponent } from './verify-email.component';
import { ForgotPasswordComponent } from './forgot-password.component';
import { ResetPasswordComponent } from './reset-password.component';
import { AccountComponent } from './account.component'; // ✅ new import

@NgModule({
  imports: [
    CommonModule,
    ReactiveFormsModule,
    AccountRoutingModule
  ],
  declarations: [
    LayoutComponent,
    LoginComponent,
    RegisterComponent,
    VerifyEmailComponent,
    ForgotPasswordComponent,
    ResetPasswordComponent,
    AccountComponent   // ✅ declare AccountComponent here
  ]
})
export class AccountModule { }


================================================================================
File: src\app\account\forgot-password.component.html
Size: 1.02 kB
================================================================================

﻿<h3 class="card-header">Forgot Password</h3>
<div class="card-body">
    <form [formGroup]="form" (ngSubmit)="onSubmit()">
        <div class="mb-3">
            <label class="form-label">Email</label>
            <input type="text" formControlName="email" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.email.errors }" placeholder="Enter your email" title="Email address" />
            <div *ngIf="submitted && f.email.errors" class="invalid-feedback">
                <div *ngIf="f.email.errors.required">Email is required</div>
                <div *ngIf="f.email.errors.email">Email is invalid</div>
            </div>
        </div>
        <div class="mb-3">
            <button type="submit" [disabled]="loading" class="btn btn-primary">
                <span *ngIf="loading" class="spinner-border spinner-border-sm me-1"></span>
                Submit
            </button>
            <a routerLink="../login" class="btn btn-link">Cancel</a>
        </div>
    </form>
</div>

================================================================================
File: src\app\account\forgot-password.component.ts
Size: 1.5 kB
================================================================================

﻿import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { first, finalize } from 'rxjs/operators';

import { AccountService, AlertService } from '@app/_services';

@Component({ templateUrl: 'forgot-password.component.html' })
export class ForgotPasswordComponent implements OnInit {
    form!: FormGroup;
    loading = false;
    submitted = false;

    constructor(
        private formBuilder: FormBuilder,
        private accountService: AccountService,
        private alertService: AlertService
    ) { }

    ngOnInit() {
        this.form = this.formBuilder.group({
            email: ['', [Validators.required, Validators.email]]
        });
    }

    // convenience getter for easy access to form fields
    get f() { return this.form.controls; }

    onSubmit() {
        this.submitted = true;

        // reset alerts on submit
        this.alertService.clear();

        // stop here if form is invalid
        if (this.form.invalid) {
            return;
        }

        this.loading = true;
        this.accountService.forgotPassword(this.f.email.value)
            .pipe(first())
            .pipe(finalize(() => this.loading = false))
            .subscribe({
                next: () => this.alertService.success('Please check your email for password reset instructions'),
                error: error => this.alertService.error(error)
            });
    }
}

================================================================================
File: src\app\account\layout.component.html
Size: 598 B
================================================================================

﻿<div *ngIf="['/account/login','/account/register','/account/forgot-password','/account/reset-password','/account/verify-email'].includes(router.url); else dashboard">
  <div class="container">
    <div class="row justify-content-center">
      <div class="col-lg-8 mt-5">
        <div class="card shadow-sm">
          <div class="card-body">
            <router-outlet></router-outlet>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<ng-template #dashboard>
  <div class="container mt-4">
    <router-outlet></router-outlet>
  </div>
</ng-template>


================================================================================
File: src\app\account\layout.component.ts
Size: 609 B
================================================================================

﻿import { Component } from '@angular/core';
import { Router } from '@angular/router';

import { AccountService } from '@app/_services';

@Component({ templateUrl: 'layout.component.html' })
export class LayoutComponent {
    constructor(
        public router: Router,
        private accountService: AccountService
    ) {
        // Only redirect if logged in AND currently on login/register routes
        if (this.accountService.accountValue &&
            ['/account/login', '/account/register'].includes(this.router.url)) {
            this.router.navigate(['/']);
        }
    }
}


================================================================================
File: src\app\account\login.component.html
Size: 1.63 kB
================================================================================

﻿<h3 class="card-header">Login</h3>
<div class="card-body">
    <form [formGroup]="form" (ngSubmit)="onSubmit()">
        <div class="mb-3">
            <label class="form-label">Email</label>
            <input type="text" formControlName="email" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.email.errors }" />
            <div *ngIf="submitted && f.email.errors" class="invalid-feedback">
                <div *ngIf="f.email.errors.required">Email is required</div>
                <div *ngIf="f.email.errors.email">Email is invalid</div>
            </div>
        </div>
        <div class="mb-3">
            <label class="form-label">Password</label>
            <input type="password" formControlName="password" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.password.errors }" />
            <div *ngIf="submitted && f.password.errors" class="invalid-feedback">
                <div *ngIf="f.password.errors.required">Password is required</div>
            </div>
        </div>
        <div class="row">
            <div class="mb-3 col">
                <button [disabled]="submitting" class="btn btn-primary">
                    <span *ngIf="submitting" class="spinner-border spinner-border-sm me-1"></span>
                    Login
                </button>
                <a routerLink="../register" class="btn btn-link">Register</a>
            </div>
            <div class="mb-3 col text-end">
                <a routerLink="../forgot-password" class="btn btn-link pe-0">Forgot Password?</a>
            </div>
        </div>
    </form>
</div>

================================================================================
File: src\app\account\login.component.ts
Size: 1.88 kB
================================================================================

﻿import { Component, OnInit } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { first } from 'rxjs/operators';

import { AccountService, AlertService } from '@app/_services';

@Component({ templateUrl: 'login.component.html' })
export class LoginComponent implements OnInit {
    form!: FormGroup;
    submitting = false;
    submitted = false;

    constructor(
        private formBuilder: FormBuilder,
        private route: ActivatedRoute,
        private router: Router,
        private accountService: AccountService,
        private alertService: AlertService
    ) { }

    ngOnInit() {
        this.form = this.formBuilder.group({
            email: ['', [Validators.required, Validators.email]],
            password: ['', Validators.required]
        });
    }

    // convenience getter for easy access to form fields
    get f() { return this.form.controls; }

    onSubmit() {
        this.submitted = true;

        // reset alerts on submit
        this.alertService.clear();

        // stop here if form is invalid
        if (this.form.invalid) {
            return;
        }

        this.submitting = true;
        this.accountService.login(this.f.email.value, this.f.password.value)
            .pipe(first())
            .subscribe({
                next: () => {
                    // get return url from query parameters or default to home page
                    const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';
                    this.router.navigateByUrl(returnUrl);
                },
                error: error => {
                    this.alertService.error(error);
                    this.submitting = false;
                }
            });
    }
}

================================================================================
File: src\app\account\register.component.html
Size: 4.36 kB
================================================================================

﻿<h3 class="card-header">Register</h3>
<div class="card-body">
    <form [formGroup]="form" (ngSubmit)="onSubmit()">
        <div class="row">
            <div class="mb-3 col-2">
                <label class="form-label">Title</label>
                <select formControlName="title" class="form-select" [ngClass]="{ 'is-invalid': submitted && f.title.errors }">
                    <option value=""></option>
                    <option value="Mr">Mr</option>
                    <option value="Mrs">Mrs</option>
                    <option value="Miss">Miss</option>
                    <option value="Ms">Ms</option>
                </select>
                <div *ngIf="submitted && f.title.errors" class="invalid-feedback">
                    <div *ngIf="f.title.errors.required">Title is required</div>
                </div>
            </div>
            <div class="mb-3 col-5">
                <label class="form-label">First Name</label>
                <input type="text" formControlName="firstName" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.firstName.errors }" />
                <div *ngIf="submitted && f.firstName.errors" class="invalid-feedback">
                    <div *ngIf="f.firstName.errors.required">First Name is required</div>
                </div>
            </div>
            <div class="mb-3 col-5">
                <label class="form-label">Last Name</label>
                <input type="text" formControlName="lastName" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.lastName.errors }" />
                <div *ngIf="submitted && f.lastName.errors" class="invalid-feedback">
                    <div *ngIf="f.lastName.errors.required">Last Name is required</div>
                </div>
            </div>
        </div>
        <div class="mb-3">
            <label class="form-label">Email</label>
            <input type="text" formControlName="email" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.email.errors }" />
            <div *ngIf="submitted && f.email.errors" class="invalid-feedback">
                <div *ngIf="f.email.errors.required">Email is required</div>
                <div *ngIf="f.email.errors.email">Email must be a valid email address</div>
            </div>
        </div>
        <div class="row">
            <div class="mb-3 col">
                <label class="form-label">Password</label>
                <input type="password" formControlName="password" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.password.errors }" />
                <div *ngIf="submitted && f.password.errors" class="invalid-feedback">
                    <div *ngIf="f.password.errors.required">Password is required</div>
                    <div *ngIf="f.password.errors.minlength">Password must be at least 6 characters</div>
                </div>
            </div>
            <div class="mb-3 col">
                <label class="form-label">Confirm Password</label>
                <input type="password" formControlName="confirmPassword" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.confirmPassword.errors }" />
                <div *ngIf="submitted && f.confirmPassword.errors" class="invalid-feedback">
                    <div *ngIf="f.confirmPassword.errors.required">Confirm Password is required</div>
                    <div *ngIf="f.confirmPassword.errors.mustMatch">Passwords must match</div>
                </div>
            </div>
        </div>
        <div class="mb-3 form-check">
            <input type="checkbox" formControlName="acceptTerms" id="acceptTerms" class="form-check-input" [ngClass]="{ 'is-invalid': submitted && f.acceptTerms.errors }" />
            <label for="acceptTerms" class="form-check-label">Accept Terms & Conditions</label>
            <div *ngIf="submitted && f.acceptTerms.errors" class="invalid-feedback">Accept Ts & Cs is required</div>
        </div>
        <div class="mb-3">
            <button [disabled]="submitting" class="btn btn-primary">
                <span *ngIf="submitting" class="spinner-border spinner-border-sm me-1"></span>
                Register
            </button>
            <a routerLink="../login" href="" class="btn btn-link">Cancel</a>
        </div>
    </form>
</div>

================================================================================
File: src\app\account\register.component.ts
Size: 2.29 kB
================================================================================

﻿import { Component, OnInit } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { first } from 'rxjs/operators';

import { AccountService, AlertService } from '@app/_services';
import { MustMatch } from '@app/_helpers';

@Component({ templateUrl: 'register.component.html' })
export class RegisterComponent implements OnInit {
    form!: FormGroup;
    submitting = false;
    submitted = false;

    constructor(
        private formBuilder: FormBuilder,
        private route: ActivatedRoute,
        private router: Router,
        private accountService: AccountService,
        private alertService: AlertService
    ) { }

    ngOnInit() {
        this.form = this.formBuilder.group({
            title: ['', Validators.required],
            firstName: ['', Validators.required],
            lastName: ['', Validators.required],
            email: ['', [Validators.required, Validators.email]],
            password: ['', [Validators.required, Validators.minLength(6)]],
            confirmPassword: ['', Validators.required],
            acceptTerms: [false, Validators.requiredTrue]
        }, {
            validator: MustMatch('password', 'confirmPassword')
        });
    }

    // convenience getter for easy access to form fields
    get f() { return this.form.controls; }

    onSubmit() {
        this.submitted = true;

        // reset alerts on submit
        this.alertService.clear();

        // stop here if form is invalid
        if (this.form.invalid) {
            return;
        }

        this.submitting = true;
        this.accountService.register(this.form.value)
            .pipe(first())
            .subscribe({
                next: () => {
                    this.alertService.success('Registration successful, please check your email for verification instructions', { keepAfterRouteChange: true });
                    this.router.navigate(['../login'], { relativeTo: this.route });
                },
                error: error => {
                    this.alertService.error(error);
                    this.submitting = false;
                }
            });
    }
}

================================================================================
File: src\app\account\reset-password.component.html
Size: 1.94 kB
================================================================================

﻿<h3 class="card-header">Reset Password</h3>
<div class="card-body">
    <div *ngIf="tokenStatus == TokenStatus.Validating">
        Validating token...
    </div>
    <div *ngIf="tokenStatus == TokenStatus.Invalid">
        Token validation failed, if the token has expired you can get a new one at the <a routerLink="../forgot-password">forgot password</a> page.
    </div>
    <form *ngIf="tokenStatus == TokenStatus.Valid" [formGroup]="form" (ngSubmit)="onSubmit()">
        <div class="mb-3">
            <label class="form-label">Password</label>
            <input type="password" formControlName="password" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.password.errors }" />
            <div *ngIf="submitted && f.password.errors" class="invalid-feedback">
                <div *ngIf="f.password.errors.required">Password is required</div>
                <div *ngIf="f.password.errors.minlength">Password must be at least 6 characters</div>
            </div>
        </div>
        <div class="mb-3">
            <label class="form-label">Confirm Password</label>
            <input type="password" formControlName="confirmPassword" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.confirmPassword.errors }" />
            <div *ngIf="submitted && f.confirmPassword.errors" class="invalid-feedback">
                <div *ngIf="f.confirmPassword.errors.required">Confirm Password is required</div>
                <div *ngIf="f.confirmPassword.errors.mustMatch">Passwords must match</div>
            </div>
        </div>
        <div class="mb-3">
            <button [disabled]="loading" class="btn btn-primary">
                <span *ngIf="loading" class="spinner-border spinner-border-sm me-1"></span>
                Reset Password
            </button>
            <a routerLink="../login" class="btn btn-link">Cancel</a>
        </div>
    </form>
</div>

================================================================================
File: src\app\account\reset-password.component.ts
Size: 2.81 kB
================================================================================

﻿import { Component, OnInit } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { first } from 'rxjs/operators';

import { AccountService, AlertService } from '@app/_services';
import { MustMatch } from '@app/_helpers';

enum TokenStatus {
    Validating,
    Valid,
    Invalid
}

@Component({ templateUrl: 'reset-password.component.html' })
export class ResetPasswordComponent implements OnInit {
    TokenStatus = TokenStatus;
    tokenStatus = TokenStatus.Validating;
    token?: string;
    form!: FormGroup;
    loading = false;
    submitted = false;

    constructor(
        private formBuilder: FormBuilder,
        private route: ActivatedRoute,
        private router: Router,
        private accountService: AccountService,
        private alertService: AlertService
    ) { }

    ngOnInit() {
        this.form = this.formBuilder.group({
            password: ['', [Validators.required, Validators.minLength(6)]],
            confirmPassword: ['', Validators.required],
        }, {
            validator: MustMatch('password', 'confirmPassword')
        });

        const token = this.route.snapshot.queryParams['token'];

        // remove token from url to prevent http referer leakage
        this.router.navigate([], { relativeTo: this.route, replaceUrl: true });

        this.accountService.validateResetToken(token)
            .pipe(first())
            .subscribe({
                next: () => {
                    this.token = token;
                    this.tokenStatus = TokenStatus.Valid;
                },
                error: () => {
                    this.tokenStatus = TokenStatus.Invalid;
                }
            });
    }

    // convenience getter for easy access to form fields
    get f() { return this.form.controls; }

    onSubmit() {
        this.submitted = true;

        // reset alerts on submit
        this.alertService.clear();

        // stop here if form is invalid
        if (this.form.invalid) {
            return;
        }

        this.loading = true;
        this.accountService.resetPassword(this.token!, this.f.password.value, this.f.confirmPassword.value)
            .pipe(first())
            .subscribe({
                next: () => {
                    this.alertService.success('Password reset successful, you can now login', { keepAfterRouteChange: true });
                    this.router.navigate(['../login'], { relativeTo: this.route });
                },
                error: error => {
                    this.alertService.error(error);
                    this.loading = false;
                }
            });
    }
}

================================================================================
File: src\app\account\verify-email.component.html
Size: 363 B
================================================================================

﻿<h3 class="card-header">Verify Email</h3>
<div class="card-body">
    <div *ngIf="emailStatus == EmailStatus.Verifying">
        Verifying...
    </div>
    <div *ngIf="emailStatus == EmailStatus.Failed">
        Verification failed, you can also verify your account using the <a routerLink="forgot-password">forgot password</a> page.
    </div>
</div>

================================================================================
File: src\app\account\verify-email.component.ts
Size: 1.4 kB
================================================================================

﻿import { Component, OnInit } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { first } from 'rxjs/operators';

import { AccountService, AlertService } from '@app/_services';

enum EmailStatus {
    Verifying,
    Failed
}

@Component({ templateUrl: 'verify-email.component.html' })
export class VerifyEmailComponent implements OnInit {
    EmailStatus = EmailStatus;
    emailStatus = EmailStatus.Verifying;

    constructor(
        private route: ActivatedRoute,
        private router: Router,
        private accountService: AccountService,
        private alertService: AlertService
    ) { }

    ngOnInit() {
        const token = this.route.snapshot.queryParams['token'];

        // remove token from url to prevent http referer leakage
        this.router.navigate([], { relativeTo: this.route, replaceUrl: true });

        this.accountService.verifyEmail(token)
            .pipe(first())
            .subscribe({
                next: () => {
                    this.alertService.success('Verification successful, you can now login', { keepAfterRouteChange: true });
                    this.router.navigate(['../login'], { relativeTo: this.route });
                },
                error: () => {
                    this.emailStatus = EmailStatus.Failed;
                }
            });
    }
}

================================================================================
File: src\app\admin\accounts\accounts-routing.module.ts
Size: 518 B
================================================================================

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { ListComponent } from './list.component';
import { AddEditComponent } from './add-edit.component';

const routes: Routes = [
  { path: '', component: ListComponent },
  { path: 'add', component: AddEditComponent },
  { path: 'edit/:id', component: AddEditComponent }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class AccountsRoutingModule {}


================================================================================
File: src\app\admin\accounts\accounts.module.ts
Size: 634 B
================================================================================

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';

import { AccountsRoutingModule } from './accounts-routing.module';
import { ListComponent } from './list.component';
import { AddEditComponent } from './add-edit.component';

@NgModule({
  imports: [
    CommonModule,
    ReactiveFormsModule,
    FormsModule,
    RouterModule,
    AccountsRoutingModule
  ],
  declarations: [
    ListComponent,
    AddEditComponent
  ]
})
export class AccountsModule {}


================================================================================
File: src\app\admin\accounts\add-edit.component.html
Size: 4.68 kB
================================================================================

﻿<h1>{{ title }}</h1>

<form *ngIf="!loading" [formGroup]="form" (ngSubmit)="onSubmit()">
  <div class="row">
    <div class="mb-3 col-2">
      <label class="form-label" for="titleSelect">Title</label>
      <select id="titleSelect" formControlName="title" class="form-select" [ngClass]="{ 'is-invalid': submitted && f.title.errors }">
        <option value="">-- Select --</option>
        <option value="Mr">Mr</option>
        <option value="Mrs">Mrs</option>
        <option value="Miss">Miss</option>
      </select>
      <div *ngIf="submitted && f.title.errors" class="invalid-feedback">Title is required</div>
    </div>

    <div class="mb-3 col-5">
      <label class="form-label">First Name</label>
      <input type="text" formControlName="firstName" class="form-control"
             [ngClass]="{ 'is-invalid': submitted && f.firstName.errors }"
             placeholder="Enter first name" title="First Name" />
      <div *ngIf="submitted && f.firstName.errors" class="invalid-feedback">First Name is required</div>
    </div>

    <div class="mb-3 col-5">
      <label class="form-label">Last Name</label>
      <input type="text" formControlName="lastName" class="form-control"
             [ngClass]="{ 'is-invalid': submitted && f.lastName.errors }"
             placeholder="Enter last name" title="Last Name" />
      <div *ngIf="submitted && f.lastName.errors" class="invalid-feedback">Last Name is required</div>
    </div>
  </div>

  <div class="mb-3">
    <label class="form-label">Email</label>
    <input type="email" formControlName="email" class="form-control"
           [ngClass]="{ 'is-invalid': submitted && f.email.errors }"
           placeholder="Enter email" title="Email" />
    <div *ngIf="submitted && f.email.errors" class="invalid-feedback">
      <span *ngIf="f.email.errors?.required">Email is required</span>
      <span *ngIf="f.email.errors?.email">Enter a valid email</span>
    </div>
  </div>

  <div class="mb-3">
    <label class="form-label" for="roleSelect">Role</label>
    <select id="roleSelect" title="Role" formControlName="role" class="form-select" [ngClass]="{ 'is-invalid': submitted && f.role.errors }">
      <option value="">-- Select Role --</option>
      <option value="Admin">Admin</option>
      <option value="User">User</option>
    </select>
    <div *ngIf="submitted && f.role.errors" class="invalid-feedback">Role is required</div>
  </div>

  <div class="mb-3">
    <label class="form-label">Status</label>
    <select formControlName="status" class="form-select" title="Status" [ngClass]="{ 'is-invalid': submitted && f.status.errors }">
      <option value="">-- Select Status --</option>
      <option value="active">Active</option>
      <option value="inactive">Inactive</option>
    </select>
    <div *ngIf="submitted && f.status.errors" class="invalid-feedback">Status is required</div>
  </div>

  <!-- Password -->
  <div class="mb-3">
    <label class="form-label">Password</label>
    <input type="password" formControlName="password" class="form-control"
           [ngClass]="{ 'is-invalid': submitted && f.password.errors }" autocomplete="new-password"
           title="Password" placeholder="Enter password" />
    <div *ngIf="!isPasswordProvided()" class="form-text">
      Password and confirm password is required when adding a new account.
    </div>
    <div *ngIf="submitted && f.password.errors?.minlength" class="invalid-feedback">
      Password must be at least 6 characters.
    </div>
  </div>

  <!-- Confirm Password -->
  <div class="mb-3" *ngIf="isPasswordProvided()">
    <label class="form-label">Confirm Password</label>
    <input type="password" formControlName="confirmPassword" class="form-control"
           [ngClass]="{ 'is-invalid': submitted && f.confirmPassword.errors }" autocomplete="new-password"
           title="Confirm Password" placeholder="Confirm password" />
    <div *ngIf="submitted && f.confirmPassword.errors?.required" class="invalid-feedback">
      Please confirm the password.
    </div>
    <div *ngIf="submitted && f.confirmPassword.errors?.mustMatch" class="invalid-feedback">
      Passwords must match.
    </div>
  </div>

  <div class="mb-3">
    <button type="submit" [disabled]="submitting" class="btn btn-primary">
      <span *ngIf="submitting" class="spinner-border spinner-border-sm me-1"></span>
      Save
    </button>
    <a routerLink="/admin/accounts" class="btn btn-link">Cancel</a>
  </div>
</form>

<div *ngIf="loading" class="text-center m-3">
  <span class="spinner-border spinner-border-lg"></span>
</div>


================================================================================
File: src\app\admin\accounts\add-edit.component.ts
Size: 4.74 kB
================================================================================

﻿import { Component, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { FormBuilder, FormGroup, Validators, AbstractControl, ValidatorFn, ValidationErrors } from '@angular/forms';
import { Subscription } from 'rxjs';
import { first } from 'rxjs/operators';

import { AccountService, AlertService } from '@app/_services';

@Component({ templateUrl: 'add-edit.component.html' })
export class AddEditComponent implements OnInit, OnDestroy {
  form!: FormGroup;
  id?: string;
  title!: string;
  loading = false;
  submitting = false;
  submitted = false;

  private passwordSub?: Subscription;

  constructor(
    private formBuilder: FormBuilder,
    private route: ActivatedRoute,
    private router: Router,
    private accountService: AccountService,
    private alertService: AlertService
  ) {}

  ngOnInit() {
    this.id = this.route.snapshot.params['id'];

    // Always include password + confirmPassword
    this.form = this.formBuilder.group({
      title: ['', Validators.required],
      firstName: ['', Validators.required],
      lastName: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]],
      role: ['', Validators.required],
      status: ['', Validators.required],
      password: ['', [Validators.minLength(6)]],
      confirmPassword: ['']
    }, { validators: this.mustMatch('password', 'confirmPassword') });

    // dynamically require confirmPassword when password is entered
    this.passwordSub = this.form.get('password')!.valueChanges
      .subscribe(() => this.ensureConfirmRequiredIfPassword());

    this.title = this.id ? 'Edit Account' : 'Create Account';

    if (this.id) {
      this.loading = true;
      this.accountService.getById(this.id)
        .pipe(first())
        .subscribe({
          next: account => {
            if (!account) {
              this.alertService.error('Account not found');
              this.router.navigate(['/admin/accounts']);
              return;
            }
            const { password, confirmPassword, ...safe } = account as any;
            this.form.patchValue(safe);
            this.loading = false;
          },
          error: error => {
            this.alertService.error(error);
            this.loading = false;
          }
        });
    }
  }

  ngOnDestroy() {
    if (this.passwordSub) this.passwordSub.unsubscribe();
  }

  get f() { return this.form.controls; }

  onSubmit() {
    this.submitted = true;
    this.alertService.clear();

    if (this.form.invalid) return;

    this.submitting = true;

    // Payload handling
    const payload: any = { ...this.form.value };

    if (!payload.password) {
      // if no password, drop both fields
      delete payload.password;
      delete payload.confirmPassword;
    }

    let request$;
    let message: string;

    if (this.id) {
      request$ = this.accountService.update(this.id!, payload);
      message = 'Account updated';
    } else {
      request$ = this.accountService.create(payload);
      message = 'Account created';
    }

    request$
      .pipe(first())
      .subscribe({
        next: () => {
          this.alertService.success(message, { keepAfterRouteChange: true });
          this.router.navigate(['/admin/accounts']);
        },
        error: error => {
          this.alertService.error(error);
          this.submitting = false;
        }
      });
  }

  mustMatch(controlName: string, matchingControlName: string): ValidatorFn {
    return (formGroup: AbstractControl): ValidationErrors | null => {
      const group = formGroup as FormGroup;
      const control = group.controls[controlName];
      const matchingControl = group.controls[matchingControlName];

      if (!control || !matchingControl) return null;

      if (!control.value && !matchingControl.value) {
        matchingControl.setErrors(null);
        return null;
      }

      if (control.value !== matchingControl.value) {
        matchingControl.setErrors({ mustMatch: true });
      } else {
        matchingControl.setErrors(null);
      }

      return null;
    };
  }

  isPasswordProvided(): boolean {
    const pw = this.form?.get('password')?.value;
    return !!pw && pw.toString().trim().length > 0;
  }

  ensureConfirmRequiredIfPassword() {
    const confirm = this.form.get('confirmPassword')!;
    if (this.isPasswordProvided()) {
      confirm.setValidators([Validators.required]);
    } else {
      confirm.clearValidators();
    }
    confirm.updateValueAndValidity({ onlySelf: true, emitEvent: false });
  }
}


================================================================================
File: src\app\admin\accounts\list.component.html
Size: 2.32 kB
================================================================================

﻿<h1>Accounts</h1>
<p>All accounts from secure (admin only) API end point:</p>

<table class="table table-striped">
    <thead>
        <tr>
            <th style="width:5%">Title</th>
            <th style="width:10%">First Name</th>
            <th style="width:10%">Last Name</th>
            <th style="width:30%">Email</th>
            <th style="width:10%">Role</th>
            <th style="width:5%">Status</th>
            <th style="width:0%">Actions</th>
        </tr>
    </thead>
    <tbody>
        <tr *ngFor="let account of accounts">
            <td class="align-middle">{{account.title}}</td>
            <td class="align-middle">{{account.firstName | titlecase}}</td>
            <td class="align-middle">{{account.lastName | titlecase}}</td>
            <td class="align-middle">{{account.email}}</td>
            <td class="align-middle">{{account.role}}</td>
            <td class="align-middle">
                <span
                    [ngStyle]="{
                        'display': 'inline-block',
                        'padding': '0.25rem 0.6rem',
                        'font-size': '0.75rem',
                        'font-weight': '600',
                        'line-height': '2',
                        'color': '#fff',
                        'border-radius': '0.35rem',
                        'background-color': (account.status || '').toLowerCase() === 'active'
                            ? '#28a745'
                            : (account.status || '').toLowerCase() === 'inactive'
                            ? '#dc3545'
                            : '#6c757d'
                    }">
                    {{ account.status || 'Unknown' }}
                </span>
            </td>
            <td style="white-space: nowrap">
                <a routerLink="edit/{{account.id}}" class="btn btn-sm btn-primary me-2">Edit</a>
            </td>
        </tr>
        <tr *ngIf="!accounts">
            <td colspan="5" class="text-center">
                <span class="spinner-border spinner-border-lg align-center"></span>
            </td>
        </tr>
    </tbody>
</table>

<!-- Button aligned to the right -->
<div class="text-end mt-1">
    <a routerLink="add" class="btn btn-sm btn-primary">Add Account</a>
</div>


================================================================================
File: src\app\admin\accounts\list.component.ts
Size: 825 B
================================================================================

﻿import { Component, OnInit } from '@angular/core';
import { first } from 'rxjs/operators';

import { AccountService } from '@app/_services';

@Component({ templateUrl: 'list.component.html' })
export class ListComponent implements OnInit {
    accounts?: any[];

    constructor(private accountService: AccountService) { }

    ngOnInit() {
        this.accountService.getAll()
            .pipe(first())
            .subscribe(accounts => this.accounts = accounts);
    }

    deleteAccount(id: string) {
        const account = this.accounts!.find(x => x.id === id);
        account.isDeleting = true;
        this.accountService.delete(id)
            .pipe(first())
            .subscribe(() => {
                this.accounts = this.accounts!.filter(x => x.id !== id)
            });
    }
}

================================================================================
File: src\app\admin\admin-routing.module.ts
Size: 810 B
================================================================================

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { SubNavComponent } from './subnav.component';
import { LayoutComponent } from './layout.component';
import { OverviewComponent } from './overview.component';

const accountsModule = () => import('./accounts/accounts.module').then(x => x.AccountsModule);

const routes: Routes = [
    { path: '', component: SubNavComponent, outlet: 'subnav' },
    {
        path: '', component: LayoutComponent,
        children: [
            { path: '', component: OverviewComponent },
            { path: 'accounts', loadChildren: accountsModule }
        ]
    }
];

@NgModule({
    imports: [RouterModule.forChild(routes)],
    exports: [RouterModule]
})
export class AdminRoutingModule { }

================================================================================
File: src\app\admin\admin.module.ts
Size: 639 B
================================================================================

import { NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

import { AdminRoutingModule } from './admin-routing.module';
import { SubNavComponent } from './subnav.component';
import { LayoutComponent } from './layout.component';
import { OverviewComponent } from './overview.component';

@NgModule({
    imports: [
        CommonModule,
        ReactiveFormsModule,
        AdminRoutingModule
    ],
    declarations: [
        SubNavComponent,
        LayoutComponent,
        OverviewComponent
    ]
})
export class AdminModule { }

================================================================================
File: src\app\admin\layout.component.html
Size: 110 B
================================================================================

﻿<div class="p-4">
    <div class="container">
        <router-outlet></router-outlet>
    </div>
</div>

================================================================================
File: src\app\admin\layout.component.ts
Size: 135 B
================================================================================

﻿import { Component } from '@angular/core';

@Component({ templateUrl: 'layout.component.html' })
export class LayoutComponent { }

================================================================================
File: src\app\admin\overview.component.html
Size: 223 B
================================================================================

﻿<div class="p-4">
    <div class="container">
        <h1>Admin</h1>
        <p>This section can only be accessed by administrators.</p>
        <p><a routerLink="accounts">Manage Accounts</a></p>
    </div>
</div>

================================================================================
File: src\app\admin\overview.component.ts
Size: 139 B
================================================================================

﻿import { Component } from '@angular/core';

@Component({ templateUrl: 'overview.component.html' })
export class OverviewComponent { }

================================================================================
File: src\app\admin\subnav.component.html
Size: 597 B
================================================================================

<!-- <nav class="admin-nav navbar navbar-expand navbar-light px-3">
    <div class="navbar-nav">
        <a routerLink="/admin" class="nav-item nav-link">SUBNAV</a>
        <a routerLink="accounts" routerLinkActive="active" class="nav-item nav-link">Accounts</a>
        <a routerLink="/employees" routerLinkActive="active" class="nav-item nav-link">Employees</a>
        <a routerLink="/departments" routerLinkActive="active" class="nav-item nav-link">Departments</a>
        <a routerLink="/requests" routerLinkActive="active" class="nav-item nav-link">Requests</a>
    </div>
</nav> -->

================================================================================
File: src\app\admin\subnav.component.ts
Size: 132 B
================================================================================

import { Component } from '@angular/core';

@Component({ templateUrl: 'subnav.component.html' })
export class SubNavComponent { }

================================================================================
File: src\app\app-routing.module.ts
Size: 2.06 kB
================================================================================

// src/app/app-routing.module.ts
import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { HomeComponent } from './home';
import { AuthGuard } from './_helpers';
import { Role } from './_models';

// Lazy-loaded feature modules
const accountModule = () => import('./account/account.module').then(m => m.AccountModule);
const adminModule = () => import('./admin/admin.module').then(m => m.AdminModule);
const profileModule = () => import('./profile/profile.module').then(m => m.ProfileModule);
const employeeModule = () => import('./employee/employee.module').then(m => m.EmployeeModule);
const departmentModule = () => import('./department/department.module').then(m => m.DepartmentModule);
const requestsModule = () => import('./requests/requests.module').then(m => m.RequestsModule);
const workflowsModule = () => import('./workflows/workflows.module').then(m => m.WorkflowsModule);

// Standalone component
import { EmployeeTransferComponent } from './employee/employee-transfer.component';

const routes: Routes = [
  { path: '', component: HomeComponent, canActivate: [AuthGuard] },

  { path: 'account', loadChildren: accountModule },
  { path: 'profile', loadChildren: profileModule, canActivate: [AuthGuard] },

  {
    path: 'admin',
    loadChildren: adminModule,
    canActivate: [AuthGuard],
    data: { roles: [Role.Admin] }
  },

  { path: 'employees', loadChildren: employeeModule, canActivate: [AuthGuard] },
  { path: 'employees/transfer/:id', component: EmployeeTransferComponent, canActivate: [AuthGuard] },

  { path: 'departments', loadChildren: departmentModule, canActivate: [AuthGuard] },
  { path: 'requests', loadChildren: requestsModule, canActivate: [AuthGuard] },

  // ✅ Workflows route
  { path: 'workflows', loadChildren: workflowsModule, canActivate: [AuthGuard] },

  { path: '**', redirectTo: '' }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule {}


================================================================================
File: src\app\app.component.html
Size: 1.9 kB
================================================================================

﻿<div class="app-container" [ngClass]="{ 'bg-light': account }">
  <!-- Main Navigation -->
  <nav
    class="navbar navbar-expand-lg navbar-dark bg-success fixed-top px-3"
    *ngIf="account"
  >
    <div class="container-fluid">
      <!-- Left nav -->
      <div class="navbar-nav">
        <a
          routerLink="/"
          routerLinkActive="active"
          [routerLinkActiveOptions]="{ exact: true }"
          class="nav-item nav-link"
        >
          Home
        </a>
        <a
          routerLink="/profile"
          routerLinkActive="active"
          class="nav-item nav-link"
        >
          Profile
        </a>
      </div>

      <!-- Right nav -->
      <div class="navbar-nav ms-auto">
        <!-- Admin-only -->
        <a
          *ngIf="account.role === Role.Admin"
          routerLink="/admin/accounts"
          routerLinkActive="active"
          class="nav-item nav-link"
        >
          Accounts
        </a>

        <!-- Shared links -->
        <a
          routerLink="/employees"
          routerLinkActive="active"
          class="nav-item nav-link"
        >
          Employees
        </a>
        <a
          routerLink="/departments"
          routerLinkActive="active"
          class="nav-item nav-link"
        >
          Departments
        </a>
        <a
          routerLink="/requests"
          routerLinkActive="active"
          class="nav-item nav-link"
        >
          Requests
        </a>

        <!-- Logout -->
        <button (click)="logout()" class="btn btn-link nav-item nav-link">
          Logout
        </button>
      </div>
    </div>
  </nav>

  <div class="container-fluid" style="padding-top: 70px;">
    <router-outlet name="subnav"></router-outlet>

    <alert></alert>

    <router-outlet></router-outlet>
  </div>
</div>


================================================================================
File: src\app\app.component.ts
Size: 497 B
================================================================================

﻿import { Component } from '@angular/core';

import { AccountService } from './_services';
import { Account, Role } from './_models';

@Component({ selector: 'app-root', templateUrl: 'app.component.html' })
export class AppComponent {
    Role = Role;
    account?: Account | null;

    constructor(private accountService: AccountService) {
        this.accountService.account.subscribe(x => this.account = x);
    }

    logout() {
        this.accountService.logout();
    }
}

================================================================================
File: src\app\app.module.ts
Size: 1.35 kB
================================================================================

﻿import { NgModule, APP_INITIALIZER } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { ReactiveFormsModule } from '@angular/forms';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';

// used to create fake backend
import { fakeBackendProvider } from './_helpers';

import { AppRoutingModule } from './app-routing.module';
import { JwtInterceptor, ErrorInterceptor, appInitializer } from './_helpers';
import { AccountService } from './_services';
import { AppComponent } from './app.component';
import { AlertComponent } from './_components';
import { HomeComponent } from './home';

@NgModule({
    imports: [
        BrowserModule,
        ReactiveFormsModule,
        HttpClientModule,
        AppRoutingModule
    ],
    declarations: [
        AppComponent,
        AlertComponent,
        HomeComponent
    ],
    providers: [
        { provide: APP_INITIALIZER, useFactory: appInitializer, multi: true, deps: [AccountService] },
        { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true },
        { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },

        // provider used to create fake backend
        //fakeBackendProvider
    ],
    bootstrap: [AppComponent]
})
export class AppModule { }

================================================================================
File: src\app\department\department-add-edit.component.html
Size: 1.28 kB
================================================================================

<div class="container mt-4">
  <h2>{{ title }}</h2>

  <form [formGroup]="form" (ngSubmit)="onSubmit()">
    <!-- Department Name -->
    <div class="mb-3">
      <label for="departmentName" class="form-label">Department Name</label>
      <input
        id="departmentName"
        type="text"
        formControlName="departmentName"
        class="form-control"
        [ngClass]="{ 'is-invalid': submitted && f['departmentName'].invalid }"
      />
      <div *ngIf="submitted && f['departmentName'].invalid" class="invalid-feedback">
        Department Name is required
      </div>
    </div>

    <!-- Description -->
    <div class="mb-3">
      <label for="description" class="form-label">Description</label>
      <textarea
        id="description"
        formControlName="description"
        class="form-control"
        rows="3"
      ></textarea>
    </div>

    <!-- Actions -->
    <div class="mt-3">
      <button type="submit" class="btn btn-primary me-2" [disabled]="submitting">
        <span *ngIf="submitting" class="spinner-border spinner-border-sm me-1"></span>
        {{ id ? 'Update' : 'Create' }}
      </button>
      <a routerLink="/departments" class="btn btn-secondary">Cancel</a>
    </div>
  </form>
</div>


================================================================================
File: src\app\department\department-add-edit.component.ts
Size: 2.67 kB
================================================================================

// src/app/department/department-add-edit.component.ts
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { first } from 'rxjs/operators';

import { DepartmentService, Department } from '@app/_services/department.service';

@Component({
  selector: 'app-department-add-edit',
  templateUrl: './department-add-edit.component.html'
})
export class DepartmentAddEditComponent implements OnInit {
  form!: FormGroup;
  id?: string | number;
  loading = false;
  submitting = false;
  submitted = false;   // 👈 add this
  title = 'Add Department';

  constructor(
    private fb: FormBuilder,
    private deptSvc: DepartmentService,
    private route: ActivatedRoute,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.id = this.route.snapshot.params['id'];

    this.form = this.fb.group({
      departmentName: ['', Validators.required],
      description: ['']
    });

    if (this.id) {
      this.title = 'Edit Department';
      this.loadDepartment();
    }
  }

  // 👇 add this getter so you can write f['departmentName'] in the template
  get f() {
    return this.form.controls;
  }

  private loadDepartment(): void {
    this.loading = true;
    this.deptSvc.getById(this.id!)
      .pipe(first())
      .subscribe({
        next: (d: Department) => {
          this.loading = false;
          this.form.patchValue({
            departmentName: d?.departmentName ?? '',
            description: d?.description ?? ''
          });
        },
        error: () => {
          this.loading = false;
          alert('Failed to load department details');
        }
      });
  }

  onSubmit(): void {
    this.submitted = true;  // 👈 mark as submitted so validation works
    if (this.form.invalid) return;

    this.submitting = true;
    const payload: Partial<Department> = {
      departmentName: this.f['departmentName'].value,
      description: this.f['description'].value
    };

    const request$ = this.id
      ? this.deptSvc.update(this.id, payload)
      : this.deptSvc.create(payload);

    request$
      .pipe(first())
      .subscribe({
        next: () => {
          this.submitting = false;
          this.router.navigate(['/departments']);
        },
        error: (err) => {
          this.submitting = false;
          alert(err?.message || (this.id ? 'Update failed' : 'Create failed'));
        }
      });
  }

  onCancel(): void {
    this.router.navigate(['/departments']);
  }
}


================================================================================
File: src\app\department\department-routing.module.ts
Size: 577 B
================================================================================

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { DepartmentComponent } from './department.component';
import { DepartmentAddEditComponent } from './department-add-edit.component';

const routes: Routes = [
  { path: '', component: DepartmentComponent },
  { path: 'add', component: DepartmentAddEditComponent },
  { path: ':id/edit', component: DepartmentAddEditComponent }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class DepartmentRoutingModule {}


================================================================================
File: src\app\department\department.component.html
Size: 1.12 kB
================================================================================

<div class="container mt-4">
  <h1>Departments</h1>
  <p>Welcome to the Employees section.</p>
  <div *ngIf="loading" class="alert alert-info">Loading...</div>
  <div *ngIf="error" class="alert alert-danger">{{ error }}</div>

  <table class="table table-striped mt-3" *ngIf="departments.length > 0">
    <thead>
      <tr>
        <!-- <th>ID</th> -->
        <th>Name</th>
        <th>Description</th>
        <th>Employee Count</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let dept of departments">
        <!-- <td>{{ dept.id }}</td> -->
        <td>{{ dept.name }}</td>
        <td>{{ dept.description }}</td>
        <td>{{ dept.employeeCounts }}</td>
        <td>
          <button class="btn btn-sm btn-primary" (click)="onEdit(dept)">Edit</button>
        </td>
      </tr>
    </tbody>
  </table>
<div class="text-end">
  <button class="btn btn-primary mb-3" (click)="onAdd()">Add Department</button>
</div>
  <div *ngIf="!loading && departments.length === 0 && !error" class="alert alert-info">
    No departments found.
  </div>
</div>


================================================================================
File: src\app\department\department.component.ts
Size: 2.05 kB
================================================================================

import { Component, OnInit } from '@angular/core';
import { DepartmentService, Department } from '@app/_services/department.service';
import { Router } from '@angular/router';
import { of } from 'rxjs';
import { first, catchError, finalize } from 'rxjs/operators';

@Component({
  selector: 'app-departments',
  templateUrl: './department.component.html'
})
export class DepartmentComponent implements OnInit {
  departments: Department[] = [];
  rawResponse: any = null;
  loading = false;
  error = '';

  constructor(private deptSvc: DepartmentService, private router: Router) {}

  ngOnInit(): void {
    this.load();
  }

  load(): void {
    this.loading = true;
    this.error = '';

    this.deptSvc.getAll()
      .pipe(
        first(),
        catchError(err => {
          console.error('[DepartmentComponent] load error', err);
          this.error = 'Unable to load departments';
          return of([] as Department[]);
        }),
        finalize(() => this.loading = false)
      )
      .subscribe((res: Department[]) => {
        this.rawResponse = res;
        console.debug('[DepartmentComponent] raw response:', res);

        // ✅ Use backend response directly
        this.departments = (res || []).map(d => ({
          id: d.id ?? (d as any).ID ?? (d as any).departmentId ?? null,
          name: d.name ?? (d as any).Name ?? (d as any).departmentName ?? '',
          description: d.description ?? (d as any).Description ?? '',
          // Trust backend employeeCount
          employeeCounts: d.employeeCounts !== undefined && d.employeeCounts !== null
            ? Number(d.employeeCounts)
            : 0,
          raw: d
        }));
      });
  }

  refresh(): void {
    this.load();
  }

  onAdd(): void {
    this.router.navigate(['/departments/add']);
  }

  onEdit(d: Department): void {
    const id = d.id ?? (d as any).ID ?? (d as any).departmentId;
    if (id) {
      this.router.navigate(['/departments', id, 'edit']);
    }
  }
}


================================================================================
File: src\app\department\department.module.ts
Size: 621 B
================================================================================

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { DepartmentRoutingModule } from './department-routing.module';
import { DepartmentComponent } from './department.component';
import { DepartmentAddEditComponent } from './department-add-edit.component';

@NgModule({
  declarations: [
    DepartmentComponent,
    DepartmentAddEditComponent
  ],
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    DepartmentRoutingModule
  ]
})
export class DepartmentModule {}


================================================================================
File: src\app\employee\employee-add.component.html
Size: 4.13 kB
================================================================================

<!-- src/app/employee/employee-add.component.html -->
<div class="container mt-4">
  <h2>Add Employee</h2>

  <form (ngSubmit)="onSubmit()" #employeeForm="ngForm">
    <!-- Employee ID -->
    <div class="mb-3">
      <label class="form-label">Employee ID</label>
      <input
        type="text"
        class="form-control"
        [(ngModel)]="employee.EmployeeID"
        name="EmployeeID"
        disabled
        placeholder="Auto-generated Employee ID"
        title="Employee ID (auto-generated)"
      />
    </div>

    <!-- Account -->
    <div class="mb-3">
      <label class="form-label">Account</label>
      <select
        class="form-select"
        [(ngModel)]="employee.accountId"
        name="accountId"
        required
        title="Account"
      >
        <option [ngValue]="undefined" disabled>----Select account----</option>

        <!-- when there are no available accounts, show a disabled info option -->
        <option *ngIf="accounts.length === 0" [ngValue]="undefined" disabled>
          No available accounts
        </option>

        <option *ngFor="let acc of accounts" [ngValue]="acc.id">
          {{ acc.firstName }} {{ acc.lastName }} ({{ acc.email }})
        </option>
      </select>
    </div>

    <!-- Position -->
    <div class="mb-3">
      <label class="form-label">Position</label>
      <select
        class="form-select"
        [(ngModel)]="employee.position"
        name="position"
        required
        title="Position"
      >
        <option value="" disabled>----Select position----</option>
        <option value="Intern / Trainee">Intern / Trainee</option>
        <option value="Assistant / Junior">Assistant / Junior</option>
        <option value="Staff / Associate">Staff / Associate</option>
        <option value="Specialist / Senior">Specialist / Senior</option>
        <option value="Supervisor / Team Lead">Supervisor / Team Lead</option>
        <option value="Manager">Manager</option>
        <option value="Senior Manager / Department Head">Senior Manager / Department Head</option>
        <option value="Director">Director</option>
        <option value="Vice President / Executive Director">Vice President / Executive Director</option>
        <option value="President / C-level">President / C-level</option>
      </select>
    </div>

    <!-- Department -->
    <div class="mb-3">
      <label class="form-label">Department</label>
      <select
        class="form-select"
        [(ngModel)]="employee.departmentId"
        name="departmentId"
        required
        title="Department"
      >
        <option [ngValue]="undefined" disabled>----Select department----</option>
        <option *ngFor="let dept of departments" [ngValue]="dept.id">
          {{ dept.name }}
        </option>
      </select>
    </div>

    <!-- Hire Date -->
    <div class="mb-3">
      <label class="form-label">Hire Date</label>
      <input
        type="date"
        class="form-control"
        [(ngModel)]="employee.hireDate"
        name="hireDate"
        required
        title="Hire Date"
        placeholder="Select hire date"
      />
    </div>

    <!-- Status -->
    <div class="mb-3">
      <label class="form-label">Status</label>
      <select
        class="form-select"
        [(ngModel)]="employee.status"
        name="status"
        required
        title="Status"
      >
        <option value="active">Active</option>
        <option value="inactive">Inactive</option>
      </select>
    </div>

    <!-- Error -->
    <div *ngIf="errorMessage" class="alert alert-danger">
      {{ errorMessage }}
    </div>

    <!-- Buttons -->
    <div class="text-center">
      <button
        type="submit"
        class="btn btn-primary"
        [disabled]="loading || !employeeForm.form.valid"
      >
        {{ loading ? 'Saving...' : 'Save' }}
      </button>
      <button type="button" class="btn btn-secondary ms-2" (click)="cancel()">
        Cancel
      </button>
    </div>
  </form>
</div>


================================================================================
File: src\app\employee\employee-add.component.ts
Size: 5.4 kB
================================================================================

// src/app/employee/employee-add.component.ts
import { Component, OnInit, OnDestroy } from '@angular/core';
import { Router } from '@angular/router';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Subscription, of, forkJoin } from 'rxjs';
import { catchError } from 'rxjs/operators';

import { EmployeeService, Employee } from '../_services/employee.service';
import { AccountService } from '../_services/account.service';
import { DepartmentService } from '../_services/department.service';
import { Account } from '../_models';

@Component({
  selector: 'app-employee-add',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './employee-add.component.html'
})
export class EmployeeAddComponent implements OnInit, OnDestroy {
  employee: Partial<Employee> = {
    EmployeeID: undefined,
    accountId: undefined,
    position: '',
    departmentId: undefined, // store departmentId for backend
    hireDate: '',
    status: 'active'
  };

  // use any[] because backend may return relation payloads that are not in Account model
  accounts: any[] = [];
  departments: Array<{ id: number; name: string }> = [];

  loading = false;
  errorMessage = '';
  private subs: Subscription[] = [];

  constructor(
    private router: Router,
    private employeeService: EmployeeService,
    private accountService: AccountService,
    private departmentService: DepartmentService
  ) {}

  ngOnInit(): void {
    // load accounts + employees in parallel, then filter accounts that are already used
    const comboSub = forkJoin({
      accounts: this.accountService.getAll().pipe(
        catchError(err => {
          console.error('Failed to load accounts', err);
          return of([]);
        })
      ),
      employees: this.employeeService.getAll().pipe(
        catchError(err => {
          console.error('Failed to load employees', err);
          return of([]);
        })
      )
    }).subscribe(
      ({ accounts, employees }: { accounts: any[]; employees: any[] }) => {
        try {
          // build set of accountIds already used by employees
          const usedAccountIds = new Set(
            (employees || [])
              .map(e => e.accountId)
              .filter(id => id !== undefined && id !== null)
          );

          // filter accounts: must be active and not used
          this.accounts = (accounts || []).filter((a: any) => {
            if (!a) return false;
            // If backend attached Employee relation directly to account, also exclude
            const hasEmployeeRelation = !!(a.Employee && (Array.isArray(a.Employee) ? a.Employee.length > 0 : true));
            return a.status === 'active' && !usedAccountIds.has(a.id) && !hasEmployeeRelation;
          });
        } catch (err) {
          console.error('Error filtering accounts', err);
          // fallback: show only active accounts
          this.accounts = (accounts || []).filter((a: any) => a && a.status === 'active');
        }
      },
      err => {
        console.error('Failed to load accounts/employees', err);
        this.accounts = [];
      }
    );
    this.subs.push(comboSub);

    // Fetch next EmployeeID preview
    const idSub = this.employeeService.getNextId().subscribe({
      next: res => (this.employee.EmployeeID = res?.nextId),
      error: err => {
        console.warn('Could not fetch next EmployeeID preview', err);
        this.employee.EmployeeID = undefined;
      }
    });
    this.subs.push(idSub);

    // Load departments
    const deptSub = this.departmentService
      .getAll()
      .pipe(
        catchError(err => {
          console.error('Failed to load departments', err);
          this.errorMessage = 'Unable to load departments';
          return of([]);
        })
      )
      .subscribe(res => {
        this.departments = (res || []).map((d: any) => ({
          id: Number(d.id),
          name: d.departmentName
        }));
      });
    this.subs.push(deptSub);
  }

  onSubmit(): void {
    this.errorMessage = '';

    if (!this.employee.accountId) {
      this.errorMessage = 'Please select an account.';
      return;
    }
    if (!this.employee.departmentId) {
      this.errorMessage = 'Please select a department.';
      return;
    }

    // Build payload to match backend model
    const payload: Partial<Employee> = {
      EmployeeID: this.employee.EmployeeID,
      accountId: this.employee.accountId,
      position: this.employee.position,
      departmentId: this.employee.departmentId,
      hireDate: this.employee.hireDate,
      status: this.employee.status === 'inactive' ? 'inactive' : 'active'
    };

    this.loading = true;
    this.employeeService.create(payload).subscribe({
      next: () => {
        this.loading = false;
        this.router.navigate(['/employees']);
      },
      error: err => {
        console.error('Create employee failed', err);
        this.errorMessage =
          err?.message || err?.error?.message || 'Failed to create employee.';
        this.loading = false;
      }
    });
  }

  cancel(): void {
    this.router.navigate(['/employees']);
  }

  ngOnDestroy(): void {
    this.subs.forEach(s => s.unsubscribe());
  }
}


================================================================================
File: src\app\employee\employee-edit.component.html
Size: 3.56 kB
================================================================================

<div class="container mt-4">
  <h2>Edit Employee</h2>

  <form (ngSubmit)="onSubmit()" #employeeForm="ngForm">
    <!-- Employee ID -->
    <div class="mb-3">
      <label class="form-label">Employee ID</label>
      <input
        type="text"
        class="form-control"
        [(ngModel)]="employee.EmployeeID"
        name="EmployeeID"
        disabled
      />
    </div>

    <!-- Account -->
    <div class="mb-3">
      <label class="form-label">Account</label>
      <select
        class="form-select"
        [(ngModel)]="employee.accountId"
        name="accountId"
        required
      >
        <option value="" disabled>Select account</option>
        <option *ngFor="let acc of accounts" [ngValue]="acc.id">
          {{ acc.firstName }} {{ acc.lastName }} ({{ acc.email }})
        </option>
      </select>
    </div>

    <!-- Position -->
    <div class="mb-3">
      <label class="form-label">Position</label>
      <select
        class="form-select"
        [(ngModel)]="employee.position"
        name="position"
        required
      >
        <option value="" disabled>Select position</option>
        <option value="Intern / Trainee">Intern / Trainee</option>
        <option value="Assistant / Junior">Assistant / Junior</option>
        <option value="Staff / Associate">Staff / Associate</option>
        <option value="Specialist / Senior">Specialist / Senior</option>
        <option value="Supervisor / Team Lead">Supervisor / Team Lead</option>
        <option value="Manager">Manager</option>
        <option value="Senior Manager / Department Head">Senior Manager / Department Head</option>
        <option value="Director">Director</option>
        <option value="Vice President / Executive Director">Vice President / Executive Director</option>
        <option value="President / C-level">President / C-level</option>
      </select>
    </div>

    <!-- Department -->
    <div class="mb-3">
      <label class="form-label">Department</label>
      <select
        class="form-select"
        [(ngModel)]="employee.departmentId"
        name="departmentId"
        required
      >
        <option value="" disabled>----Select department----</option>
        <option *ngFor="let dept of departments" [ngValue]="dept.id">
          {{ dept.departmentName }}
        </option>
      </select>
    </div>

    <!-- Hire Date -->
    <div class="mb-3">
      <label class="form-label">Hire Date</label>
      <input
        type="date"
        class="form-control"
        [(ngModel)]="employee.hireDate"
        name="hireDate"
        required
      />
    </div>

    <!-- Status -->
    <div class="mb-3">
      <label class="form-label">Status</label>
      <select
        class="form-select"
        [(ngModel)]="employee.status"
        name="status"
        required
      >
        <option value="active">Active</option>
        <option value="inactive">Inactive</option>
      </select>
    </div>

    <!-- Error -->
    <div *ngIf="errorMessage" class="alert alert-danger">
      {{ errorMessage }}
    </div>

    <!-- Buttons -->
    <div class="text-center">
      <button
        type="submit"
        class="btn btn-primary"
        [disabled]="loading || !employeeForm.form.valid"
      >
        {{ loading ? 'Saving...' : 'Save' }}
      </button>
      <button type="button" class="btn btn-secondary ms-2" (click)="cancel()">
        Cancel
      </button>
    </div>
  </form>
</div>


================================================================================
File: src\app\employee\employee-edit.component.ts
Size: 2.64 kB
================================================================================

// src/app/employee/employee-edit.component.ts
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { EmployeeService } from '@app/_services/employee.service';
import { DepartmentService } from '@app/_services/department.service';
import { AccountService } from '@app/_services/account.service';

@Component({
  templateUrl: './employee-edit.component.html'
})
export class EmployeeEditComponent implements OnInit {
  employee: any = {};        // ✅ holds form data
  accounts: any[] = [];      // ✅ dropdown options
  departments: any[] = [];
  loading = false;
  errorMessage = '';

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private employeeService: EmployeeService,
    private departmentService: DepartmentService,
    private accountService: AccountService
  ) {}

  ngOnInit(): void {
    const id = this.route.snapshot.paramMap.get('id');
    if (id) {
      this.loadEmployee(id);
    }
    this.loadAccounts();
    this.loadDepartments();
  }

  /** Load employee data by ID */
  private loadEmployee(id: string): void {
    this.loading = true;
    this.employeeService.getById(id).subscribe({
      next: (res) => {
        this.employee = res;
        this.loading = false;
      },
      error: () => {
        this.errorMessage = 'Unable to load employee';
        this.loading = false;
      }
    });
  }

  /** Load accounts for dropdown */
  private loadAccounts(): void {
    this.accountService.getAll().subscribe({
      next: (res) => (this.accounts = res),
      error: () => (this.errorMessage = 'Unable to load accounts')
    });
  }

  /** Load departments for dropdown */
  private loadDepartments(): void {
    this.departmentService.getAll().subscribe({
      next: (res) => (this.departments = res),
      error: () => (this.errorMessage = 'Unable to load departments')
    });
  }

  /** Submit form */
  onSubmit(): void {
    if (!this.employee.EmployeeID) {
      this.errorMessage = 'Employee ID is missing';
      return;
    }

    this.loading = true;
    this.employeeService.update(this.employee.EmployeeID, this.employee).subscribe({
      next: () => {
        this.loading = false;
        alert('✅ Employee updated successfully');
        this.router.navigate(['/employees']);
      },
      error: () => {
        this.loading = false;
        this.errorMessage = '❌ Update failed';
      }
    });
  }

  /** Cancel editing */
  cancel(): void {
    this.router.navigate(['/employees']);
  }
}


================================================================================
File: src\app\employee\employee-routing.module.ts
Size: 699 B
================================================================================

// src/app/employee/employee-routing.module.ts
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { EmployeeComponent } from './employee.component';
import { EmployeeAddComponent } from './employee-add.component';
import { EmployeeEditComponent } from './employee-edit.component'; // ✅ import edit

const routes: Routes = [
  { path: '', component: EmployeeComponent },
  { path: 'add', component: EmployeeAddComponent },
  { path: 'edit/:id', component: EmployeeEditComponent } // ✅ enable edit
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class EmployeeRoutingModule {}


================================================================================
File: src\app\employee\employee-transfer.component.html
Size: 1.25 kB
================================================================================

<!-- <div *ngIf="isOpen"
     class="modal d-flex align-items-center justify-content-center show"
     tabindex="-1"
     style="background: rgba(0,0,0,0.5); display: block;"
     (click)="close()">

  <div class="modal-dialog" (click)="$event.stopPropagation()">
    <div class="modal-content">
      
      Header
      <div class="modal-header">
        <h5 class="modal-title">Transfer Employee: {{ employee?.EmployeeID }}</h5>
        <button type="button" class="btn-close" (click)="close()"></button>
      </div>

      Body
      <div class="modal-body">
        <label for="department" class="form-label">Department</label>
        <select id="department" [(ngModel)]="selectedDepartmentId" class="form-select">
          <option *ngFor="let dept of departments" [value]="dept.id">
            {{ dept.name }}
          </option>
        </select>
      </div>

      Footer
      <div class="modal-footer">
        <button type="button" class="btn btn-warning" (click)="transfer()" [disabled]="loading">
          Transfer
        </button>
        <button type="button" class="btn btn-secondary" (click)="close()">
          Cancel
        </button>
      </div>
      
    </div>
  </div>
</div> -->


================================================================================
File: src\app\employee\employee-transfer.component.ts
Size: 2.64 kB
================================================================================

import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { EmployeeService, Employee } from '@app/_services/employee.service';
import { DepartmentService, Department } from '@app/_services/department.service';

@Component({
  selector: 'app-employee-transfer',
  templateUrl: './employee-transfer.component.html',
  standalone: true,
  imports: [CommonModule, FormsModule]
})
export class EmployeeTransferComponent implements OnInit {
  employee: Employee | null = null;
  departments: Department[] = [];
  selectedDepartmentId: string | number | null = null;

  loading = false;
  errorMessage = '';
  isOpen = true; // modal visibility

  constructor(
    private employeeService: EmployeeService,
    private departmentService: DepartmentService,
    private route: ActivatedRoute,
    private router: Router
  ) {}

  ngOnInit(): void {
    const id = this.route.snapshot.paramMap.get('id');
    if (id) {
      this.loadEmployee(id);
      this.loadDepartments();
    }
  }

  /** Load employee details by ID */
  private loadEmployee(id: string): void {
    this.employeeService.getById(id).subscribe({
      next: (res: Employee) => {
        this.employee = res;
        this.selectedDepartmentId = res.departmentId ?? null;
      },
      error: () => (this.errorMessage = 'Unable to load employee')
    });
  }

  /** Load all departments */
  private loadDepartments(): void {
    this.departmentService.getAll().subscribe({
      next: (res: Department[]) => (this.departments = res ?? []),
      error: () => (this.errorMessage = 'Unable to load departments')
    });
  }

  /** Transfer employee to selected department */
  transfer(): void {
    if (!this.employee?.EmployeeID || !this.selectedDepartmentId) {
      this.errorMessage = 'Employee or Department is missing';
      return;
    }

    this.loading = true;
    this.employeeService
      .update(this.employee.EmployeeID, { departmentId: this.selectedDepartmentId })
      .subscribe({
        next: () => {
          this.loading = false;
          window.alert(`✅ Employee ${this.employee?.EmployeeID} transferred successfully`);
          this.close();
        },
        error: () => {
          this.loading = false;
          window.alert('❌ Transfer failed');
        }
      });
  }

  /** Close modal and navigate back */
  close(): void {
    this.isOpen = false;
    this.router.navigate(['/employees']);
  }
}


================================================================================
File: src\app\employee\employee.component.html
Size: 4.21 kB
================================================================================

<div class="p-4">
  <div class="container">
    <!-- Alert -->
    <div *ngIf="alertMessage" class="d-flex justify-content-center mb-3">
      <div
        class="alert"
        [ngClass]="alertType === 'success' ? 'alert-success' : 'alert-danger'"
        role="alert"
        style="max-width: 500px; text-align: center;"
      >
        {{ alertMessage }}
      </div>
    </div>

    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-3">
      <h1 class="mb-0">Employees</h1>

      <!-- Filter -->
      <select
        class="form-select w-auto"
        [(ngModel)]="filterStatus"
        (change)="applyFilter()"
      >
        <option value="all">All</option>
        <option value="active">Active Only</option>
        <option value="inactive">Inactive Only</option>
      </select>
    </div>

    <p class="text">Welcome to the Employees section.</p>

    <!-- Employees Table -->
    <table
      class="table table-striped mt-4"
      *ngIf="filteredEmployees.length > 0; else noEmployees"
    >
      <thead class="table-light">
        <tr>
          <th>Employee ID</th>
          <th>Email</th>
          <th>Position</th>
          <th>Department</th>
          <th>Hire Date</th>
          <th>Status</th>
          <th class="text-center">Actions</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let emp of filteredEmployees">
          <td>{{ emp.EmployeeID }}</td>
          <td>{{ emp.email }}</td>
          <td>{{ emp.position }}</td>
          <td>{{ emp.departmentName }}</td>
          <td>{{ emp.hireDate | date: 'yyyy-MM-dd' }}</td>
          <td>
            <span
              class="badge"
              [ngClass]="emp.status === 'active' ? 'bg-success' : 'bg-danger'"
            >
              {{ emp.status }}
            </span>
          </td>
          <td class="d-flex justify-content-center gap-2">
            <button class="btn btn-sm btn-info" routerLink="/requests">
              Requests
            </button>
            <button
              class="btn btn-sm btn-info"
              [routerLink]="['/workflows']"
              [queryParams]="{ employeeId: emp.EmployeeID }"
            >
              Workflows
            </button>
            <button class="btn btn-sm btn-warning" (click)="openTransfer(emp)">
              Transfer
            </button>
            <button
              class="btn btn-sm btn-primary"
              [routerLink]="['/employees/edit', emp.EmployeeID]"
            >
              Edit
            </button>
          </td>
        </tr>
      </tbody>
    </table>

    <!-- Empty -->
    <ng-template #noEmployees>
      <p class="text-muted mt-3">No employees found.</p>
    </ng-template>

    <!-- Add Employee -->
    <div class="text-end mt-3">
      <a routerLink="/employees/add" class="btn btn-primary">
        <i class="bi bi-person-plus"></i> Add Employee
      </a>
    </div>
  </div>
</div>

<!-- Transfer Modal (Top Center) -->
<div
  *ngIf="transferVisible"
  style="
    position: fixed;
    top: 60px;
    left: 50%;
    transform: translateX(-50%);
    width: 100%;
    max-width: 500px;
    z-index: 1050;
  "
>
  <div class="card shadow">
    <div class="card-header d-flex justify-content-between align-items-center">
      <h5 class="mb-0">Transfer Employee: {{ selectedEmployee?.EmployeeID }}</h5>
      <button type="button" class="btn-close" (click)="closeTransfer()"></button>
    </div>
    <div class="card-body">
      <label class="form-label">Department</label>
      <select class="form-select mb-3" [(ngModel)]="selectedDepartmentId">
        <option *ngFor="let dept of departments" [value]="dept.id">
          {{ dept.name || dept.departmentName }}
        </option>
      </select>
      <div class="d-flex justify-content-end gap-2">
        <button class="btn btn-warning" (click)="confirmTransfer()">
          Transfer
        </button>
        <button class="btn btn-secondary" (click)="closeTransfer()">
          Cancel
        </button>
      </div>
    </div>
  </div>
</div>


================================================================================
File: src\app\employee\employee.component.ts
Size: 5.07 kB
================================================================================

// src/app/employee/employee.component.ts
import { Component, OnInit } from '@angular/core';
import { EmployeeService } from '@app/_services/employee.service';
import { DepartmentService } from '@app/_services/department.service';
import { catchError } from 'rxjs/operators';
import { of } from 'rxjs';

interface Employee {
  EmployeeID: string;
  accountId: string;
  firstName: string;
  lastName: string;
  email: string;
  role: string;
  position: string;
  departmentName: string;
  hireDate: string;
  status: string;
}

@Component({
  selector: 'app-employee',
  templateUrl: './employee.component.html'
})
export class EmployeeComponent implements OnInit {
  employees: Employee[] = [];
  filteredEmployees: Employee[] = [];
  departments: any[] = [];
  loading = false;
  errorMessage = '';

  // Transfer popup state
  transferVisible = false;
  selectedEmployee: Employee | null = null;
  selectedDepartmentId: string | number | null = null;

  // Filters
  filterStatus: 'all' | 'active' | 'inactive' = 'all';

  // Alerts
  alertMessage: string | null = null;
  alertType: 'success' | 'error' = 'success';

  constructor(
    private employeeService: EmployeeService,
    private departmentService: DepartmentService
  ) {}

  ngOnInit(): void {
    this.loadEmployees();
    this.loadDepartments();
  }

  /** Load employees */
  private loadEmployees(): void {
    this.loading = true;
    this.employeeService
      .getAll()
      .pipe(
        catchError(err => {
          console.error('Employee load failed', err);
          this.errorMessage = 'Unable to load employees';
          this.loading = false;
          return of([]);
        })
      )
      .subscribe((res: any[]) => {
        this.employees = (res || []).map(e => this.mapEmployee(e));

        // ✅ Sort by EmployeeID (A → Z)
        this.employees.sort((a, b) =>
          a.EmployeeID.localeCompare(b.EmployeeID)
        );

        this.applyFilter();
        this.loading = false;
      });
  }

  /** Load departments */
  private loadDepartments(): void {
    this.departmentService.getAll().subscribe({
      next: res => (this.departments = res),
      error: () => (this.errorMessage = 'Unable to load departments')
    });
  }

  /** Map backend → frontend */
  private mapEmployee(e: any): Employee {
    return {
      EmployeeID: e.EmployeeID ?? e.employeeCode ?? '',
      accountId: e.accountId ?? '',
      firstName: e.Account?.firstName ?? '',
      lastName: e.Account?.lastName ?? '',
      email: e.Account?.email ?? '',
      role: e.Account?.role ?? '',
      position: e.position ?? '',
      departmentName: e.Department?.departmentName ?? '—',
      hireDate: e.hireDate ?? '',
      status: e.status ?? 'active'
    };
  }

  /** Filter employees */
  applyFilter(): void {
    this.filteredEmployees =
      this.filterStatus === 'all'
        ? [...this.employees]
        : this.employees.filter(emp => emp.status === this.filterStatus);
  }

  /** Toggle status */
  toggleStatus(emp: Employee): void {
    const newStatus = emp.status === 'active' ? 'inactive' : 'active';
    this.employeeService.update(emp.EmployeeID, { status: newStatus }).subscribe({
      next: () => {
        emp.status = newStatus;
        this.applyFilter();
        this.showAlert(`✅ Status updated to ${newStatus}`, 'success');
      },
      error: () => this.showAlert('❌ Failed to update status', 'error')
    });
  }

  /** Open transfer popup */
  openTransfer(employee: Employee): void {
    this.selectedEmployee = employee;

    const currentDept = this.departments.find(
      d =>
        d.name === employee.departmentName ||
        d.departmentName === employee.departmentName
    );
    this.selectedDepartmentId = currentDept ? currentDept.id : null;

    this.transferVisible = true;
  }

  /** Close transfer popup */
  closeTransfer(): void {
    this.transferVisible = false;
    this.selectedEmployee = null;
    this.selectedDepartmentId = null;
  }

  /** Confirm transfer */
  confirmTransfer(): void {
    if (!this.selectedEmployee?.EmployeeID || !this.selectedDepartmentId) {
      this.showAlert('❌ Please select a department', 'error');
      return;
    }

    this.employeeService
      .update(this.selectedEmployee.EmployeeID, {
        departmentId: this.selectedDepartmentId
      })
      .subscribe({
        next: () => {
          this.showAlert(
            `✅ Employee ${this.selectedEmployee?.EmployeeID} transferred successfully`,
            'success'
          );
          this.closeTransfer();
          this.loadEmployees();
        },
        error: () => this.showAlert('❌ Transfer failed', 'error')
      });
  }

  /** Show alert */
  private showAlert(message: string, type: 'success' | 'error') {
    this.alertMessage = message;
    this.alertType = type;
    setTimeout(() => (this.alertMessage = null), 3000);
  }
}


================================================================================
File: src\app\employee\employee.module.ts
Size: 1.1 kB
================================================================================

// src/app/employee/employee.module.ts
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';

import { EmployeeRoutingModule } from './employee-routing.module';

// Non-standalone components → declared here
import { EmployeeComponent } from './employee.component';
import { EmployeeEditComponent } from './employee-edit.component';

// Standalone components → imported directly
import { EmployeeAddComponent } from './employee-add.component';
import { EmployeeTransferComponent } from './employee-transfer.component';

@NgModule({
  declarations: [
    EmployeeComponent,
    EmployeeEditComponent // ✅ declared, not imported
  ],
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule, // ✅ for [formGroup] in edit
    RouterModule,
    EmployeeRoutingModule,

    // ✅ standalone components
    EmployeeAddComponent,
    EmployeeTransferComponent
  ]
})
export class EmployeeModule {}


================================================================================
File: src\app\home\home.component.html
Size: 166 B
================================================================================

﻿<div class="p-4">
    <div class="container">
        <h1>Hi {{account?.role}}!</h1>
        <p>You're logged in with Angular 15 & JWT!!</p>
    </div>
</div>

================================================================================
File: src\app\home\home.component.ts
Size: 296 B
================================================================================

﻿import { Component } from '@angular/core';

import { AccountService } from '@app/_services';

@Component({ templateUrl: 'home.component.html' })
export class HomeComponent {
    account = this.accountService.accountValue;

    constructor(private accountService: AccountService) { }
}

================================================================================
File: src\app\home\index.ts
Size: 36 B
================================================================================

﻿export * from './home.component';

================================================================================
File: src\app\profile\details.component.html
Size: 295 B
================================================================================

﻿<h1>My Profile</h1>
<p *ngIf="account">
    <strong>Name: </strong> {{account.title}} {{account.firstName}} {{account.lastName}}<br />
    <strong>Email: </strong> {{account.email}} <br/>
    <strong>Role: </strong> {{account.role}}
</p>
<p><a routerLink="update">Update Profile</a></p>

================================================================================
File: src\app\profile\details.component.ts
Size: 302 B
================================================================================

﻿import { Component } from '@angular/core';

import { AccountService } from '@app/_services';

@Component({ templateUrl: 'details.component.html' })
export class DetailsComponent {
    account = this.accountService.accountValue;

    constructor(private accountService: AccountService) { }
}

================================================================================
File: src\app\profile\layout.component.html
Size: 110 B
================================================================================

﻿<div class="p-4">
    <div class="container">
        <router-outlet></router-outlet>
    </div>
</div>

================================================================================
File: src\app\profile\layout.component.ts
Size: 135 B
================================================================================

﻿import { Component } from '@angular/core';

@Component({ templateUrl: 'layout.component.html' })
export class LayoutComponent { }

================================================================================
File: src\app\profile\profile-routing.module.ts
Size: 642 B
================================================================================

import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';

import { LayoutComponent } from './layout.component';
import { DetailsComponent } from './details.component';
import { UpdateComponent } from './update.component';

const routes: Routes = [
    {
        path: '', component: LayoutComponent,
        children: [
            { path: '', component: DetailsComponent },
            { path: 'update', component: UpdateComponent }
        ]
    }
];

@NgModule({
    imports: [RouterModule.forChild(routes)],
    exports: [RouterModule]
})
export class ProfileRoutingModule { }

================================================================================
File: src\app\profile\profile.module.ts
Size: 644 B
================================================================================

import { NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

import { ProfileRoutingModule } from './profile-routing.module';
import { LayoutComponent } from './layout.component';
import { DetailsComponent } from './details.component';
import { UpdateComponent } from './update.component';

@NgModule({
    imports: [
        CommonModule,
        ReactiveFormsModule,
        ProfileRoutingModule
    ],
    declarations: [
        LayoutComponent,
        DetailsComponent,
        UpdateComponent
    ]
})
export class ProfileModule { }

================================================================================
File: src\app\profile\update.component.html
Size: 3.94 kB
================================================================================

﻿<h1>Update Profile</h1>
<form [formGroup]="form" (ngSubmit)="onSubmit()">
    <div class="row">
        <div class="mb-3 col-2">
            <label class="form-label">Title</label>
            <select formControlName="title" class="form-select" [ngClass]="{ 'is-invalid': submitted && f.title.errors }">
                <option value=""></option>
                <option value="Mr">Mr</option>
                <option value="Mrs">Mrs</option>
                <option value="Miss">Miss</option>
                <option value="Ms">Ms</option>
            </select>
            <div *ngIf="submitted && f.title.errors" class="invalid-feedback">
                <div *ngIf="f.title.errors.required">Title is required</div>
            </div>
        </div>
        <div class="mb-3 col-5">
            <label class="form-label">First Name</label>
            <input type="text" formControlName="firstName" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.firstName.errors }" />
            <div *ngIf="submitted && f.firstName.errors" class="invalid-feedback">
                <div *ngIf="f.firstName.errors.required">First Name is required</div>
            </div>
        </div>
        <div class="mb-3 col-5">
            <label class="form-label">Last Name</label>
            <input type="text" formControlName="lastName" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.lastName.errors }" />
            <div *ngIf="submitted && f.lastName.errors" class="invalid-feedback">
                <div *ngIf="f.lastName.errors.required">Last Name is required</div>
            </div>
        </div>
    </div>
    <div class="mb-3">
        <label class="form-label">Email</label>
        <input type="text" formControlName="email" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.email.errors }" />
        <div *ngIf="submitted && f.email.errors" class="invalid-feedback">
            <div *ngIf="f.email.errors.required">Email is required</div>
            <div *ngIf="f.email.errors.email">Email must be a valid email address</div>
        </div>
    </div>
    <h3 class="pt-3">Change Password</h3>
    <p>Leave blank to keep the same password</p>
    <div class="row">
        <div class="mb-3 col">
            <label class="form-label">Password</label>
            <input type="password" formControlName="password" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.password.errors }" />
            <div *ngIf="submitted && f.password.errors" class="invalid-feedback">
                <div *ngIf="f.password.errors.required">Password is required</div>
                <div *ngIf="f.password.errors.minlength">Password must be at least 6 characters</div>
            </div>
        </div>
        <div class="mb-3 col">
            <label class="form-label">Confirm Password</label>
            <input type="password" formControlName="confirmPassword" class="form-control" [ngClass]="{ 'is-invalid': submitted && f.confirmPassword.errors }" />
            <div *ngIf="submitted && f.confirmPassword.errors" class="invalid-feedback">
                <div *ngIf="f.confirmPassword.errors.required">Confirm Password is required</div>
                <div *ngIf="f.confirmPassword.errors.mustMatch">Passwords must match</div>
            </div>
        </div>
    </div>
    <div class="mb-3">
        <button type="submit" [disabled]="submitting" class="btn btn-primary me-2">
            <span *ngIf="submitting" class="spinner-border spinner-border-sm me-1"></span>
            Update
        </button>
        <button type="button" (click)="onDelete()" [disabled]="deleting" class="btn btn-danger">
            <span *ngIf="deleting" class="spinner-border spinner-border-sm me-1"></span>
            Delete
        </button>
        <a routerLink="../" href="" class="btn btn-link">Cancel</a>
    </div>
</form>

================================================================================
File: src\app\profile\update.component.ts
Size: 2.65 kB
================================================================================

﻿import { Component, OnInit } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { first } from 'rxjs/operators';

import { AccountService, AlertService } from '@app/_services';
import { MustMatch } from '@app/_helpers';

@Component({ templateUrl: 'update.component.html' })
export class UpdateComponent implements OnInit {
    account = this.accountService.accountValue!;
    form!: FormGroup;
    submitting = false;
    submitted = false;
    deleting = false;

    constructor(
        private formBuilder: FormBuilder,
        private route: ActivatedRoute,
        private router: Router,
        private accountService: AccountService,
        private alertService: AlertService
    ) { }

    ngOnInit() {
        this.form = this.formBuilder.group({
            title: [this.account.title, Validators.required],
            firstName: [this.account.firstName, Validators.required],
            lastName: [this.account.lastName, Validators.required],
            email: [this.account.email, [Validators.required, Validators.email]],
            password: ['', [Validators.minLength(6)]],
            confirmPassword: ['']
        }, {
            validator: MustMatch('password', 'confirmPassword')
        });
    }

    // convenience getter for easy access to form fields
    get f() { return this.form.controls; }

    onSubmit() {
        this.submitted = true;

        // reset alerts on submit
        this.alertService.clear();

        // stop here if form is invalid
        if (this.form.invalid) {
            return;
        }

        this.submitting = true;
        this.accountService.update(this.account.id!, this.form.value)
            .pipe(first())
            .subscribe({
                next: () => {
                    this.alertService.success('Update successful', { keepAfterRouteChange: true });
                    this.router.navigate(['../'], { relativeTo: this.route });
                },
                error: error => {
                    this.alertService.error(error);
                    this.submitting = false;
                }
            });
    }

    onDelete() {
        if (confirm('Are you sure?')) {
            this.deleting = true;
            this.accountService.delete(this.account.id!)
                .pipe(first())
                .subscribe(() => {
                    this.alertService.success('Account deleted successfully', { keepAfterRouteChange: true });
                });
        }
    }
}

================================================================================
File: src\app\requests\request-add.component.html
Size: 2.06 kB
================================================================================

<div class="container mt-4">
  <h1>Add Request</h1>

  <div *ngIf="error" class="alert alert-danger">{{ error }}</div>

  <form [formGroup]="form" (ngSubmit)="save()">
    <!-- Type -->
    <div class="mb-3">
      <label class="form-label">Type</label>
      <select class="form-select" formControlName="type">
        <option value="">-- Select Type --</option>
        <option *ngFor="let t of allowedTypes" [value]="t">
          {{ t | titlecase }}
        </option>
      </select>
    </div>

    <!-- Employee -->
    <div class="mb-3">
      <label class="form-label">Employee</label>
      <select class="form-select" formControlName="accountId">
        <option value="">-- Select Employee --</option>
        <option *ngFor="let e of employees" [value]="e.accountId">
          {{ e.displayName }}
        </option>
      </select>
    </div>

    <!-- Items -->
    <div class="mb-3">
      <label class="form-label">Items</label>
      <div formArrayName="items">
        <div *ngFor="let item of items.controls; let i = index" [formGroupName]="i" class="row g-2 mb-2">
          <div class="col">
            <input class="form-control" formControlName="name" placeholder="Item name" />
          </div>
          <div class="col-3">
            <input type="number" class="form-control" formControlName="quantity" min="1" />
          </div>
          <div class="col-auto">
            <button type="button" class="btn btn-danger" (click)="removeItem(i)">Remove</button>
          </div>
        </div>
      </div>
      <button type="button" class="btn btn-secondary mt-2" (click)="addItem()">Add Item</button>
    </div>

    <!-- Actions -->
    <div class="mt-3">
      <button type="submit" class="btn btn-success" [disabled]="submitting">
        <span *ngIf="submitting" class="spinner-border spinner-border-sm me-1"></span>
        Create
      </button>
      <button type="button" class="btn btn-secondary ms-2" (click)="cancel()">Cancel</button>
    </div>
  </form>
</div>


================================================================================
File: src\app\requests\request-add.component.ts
Size: 2.54 kB
================================================================================

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { RequestService } from '@app/_services/request.service';
import { EmployeeService } from '@app/_services/employee.service';

@Component({
  selector: 'app-request-add',
  templateUrl: './request-add.component.html'
})
export class RequestAddComponent implements OnInit {
  form!: FormGroup;
  submitting = false;
  employees: any[] = [];
  allowedTypes = ['equipment', 'leave', 'resources'];
  error = '';

  constructor(
    private fb: FormBuilder,
    private router: Router,
    private requestSvc: RequestService,
    private employeeSvc: EmployeeService
  ) {}

  ngOnInit(): void {
    this.form = this.fb.group({
      accountId: ['', Validators.required],
      type: ['', Validators.required],
      status: ['pending'],
      items: this.fb.array([this.newItem()])
    });

    this.loadEmployees();
  }

  private loadEmployees(): void {
    this.employeeSvc.getAll().subscribe({
      next: res => {
        this.employees = res.map((e: any) => ({
          accountId: e.Account?.id,
          displayName: `${e.Account?.firstName ?? ''} ${e.Account?.lastName ?? ''} (${e.Account?.email ?? ''})`
        }));
      },
      error: err => console.error('Failed to load employees', err)
    });
  }

  get items(): FormArray {
    return this.form.get('items') as FormArray;
  }

  newItem(data?: any): FormGroup {
    return this.fb.group({
      name: [data?.name || '', Validators.required],
      quantity: [data?.quantity || 1, [Validators.required, Validators.min(1)]]
    });
  }

  addItem(): void {
    this.items.push(this.newItem());
  }

  removeItem(i: number): void {
    this.items.removeAt(i);
  }

  save(): void {
    if (this.form.invalid) return;

    this.submitting = true;
    const payload = {
      ...this.form.value,
      items: JSON.stringify(this.form.value.items),
      quantity: this.form.value.items.reduce((s: number, it: any) => s + (Number(it.quantity) || 0), 0)
    };

    this.requestSvc.create(payload).subscribe({
      next: () => this.router.navigate(['/requests']),
      error: err => {
        console.error('Failed to create request', err);
        this.error = 'Failed to create request';
        this.submitting = false;
      }
    });
  }

  cancel(): void {
    this.router.navigate(['/requests']);
  }
}


================================================================================
File: src\app\requests\request-edit.component.html
Size: 2.42 kB
================================================================================

<div class="container mt-4">
  <h3>Edit Request</h3>

  <div *ngIf="loading" class="alert alert-info">Loading…</div>
  <div *ngIf="error" class="alert alert-danger">{{ error }}</div>

  <form [formGroup]="form" (ngSubmit)="save()" *ngIf="!loading">
    <!-- Type -->
    <div class="mb-3">
      <label class="form-label" for="typeSelect">Type</label>
      <select class="form-select" formControlName="type" id="typeSelect" title="Type">
        <option value="">-- Select Type --</option>
        <option *ngFor="let t of allowedTypes" [value]="t">
          {{ t | titlecase }}
        </option>
      </select>
    </div>

    <!-- Employee -->
    <div class="mb-3">
      <label class="form-label">Employee</label>
      <select class="form-select" formControlName="accountId" title="Employee">
        <option value="">-- Select Employee --</option>
        <option *ngFor="let e of employees" [value]="e.accountId">
          {{ e.displayName }}
        </option>
      </select>
    </div>

    <!-- Items -->
    <div class="mb-3">
      <label class="form-label">Items</label>
      <div formArrayName="items">
        <div *ngFor="let item of items.controls; let i = index" [formGroupName]="i" class="row g-2 mb-2">
          <div class="col">
            <input class="form-control" formControlName="name" placeholder="Name" />
          </div>
          <div class="col-3">
            <input type="number" class="form-control" formControlName="quantity" min="1" placeholder="Quantity" title="Quantity" />
          </div>
          <div class="col-auto">
            <button type="button" class="btn btn-danger" (click)="removeItem(i)">Remove</button>
          </div>
        </div>
      </div>
      <div>
      <button type="button" class="btn btn-secondary mt-2 me-2" (click)="addItem()">Add Item</button>
      <button type="button" class="btn btn-danger mt-2 me-2" (click)="delete()" [disabled]="submitting">
        Delete
      </button>
    </div>
</div>
    <!-- Actions -->
    <div class="mt-3">
      <button type="submit" class="btn btn-primary me-2" [disabled]="submitting">
        <span *ngIf="submitting" class="spinner-border spinner-border-sm me-1"></span>
        Update
      </button>
      <button type="button" class="btn btn-secondary me-2" (click)="cancel()">Cancel</button>
      
    </div>
  </form>
</div>


================================================================================
File: src\app\requests\request-edit.component.ts
Size: 4.14 kB
================================================================================

// src/app/requests/request-edit.component.ts
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { RequestService } from '@app/_services/request.service';
import { EmployeeService } from '@app/_services/employee.service';
import { RequestDto } from './request.model';

@Component({
  selector: 'app-request-edit',
  templateUrl: './request-edit.component.html'
})
export class RequestEditComponent implements OnInit {
  form!: FormGroup;
  id!: number;
  loading = false;
  submitting = false;
  employees: any[] = [];
  allowedTypes = ['equipment', 'leave', 'resources'];
  error = '';

  constructor(
    private fb: FormBuilder,
    private route: ActivatedRoute,
    private router: Router,
    private requestSvc: RequestService,
    private employeeSvc: EmployeeService
  ) {}

  ngOnInit(): void {
    const idParam = this.route.snapshot.paramMap.get('id');
    this.id = idParam ? Number(idParam) : 0;

    this.form = this.fb.group({
      accountId: ['', Validators.required],
      type: ['', Validators.required],
      status: ['pending'],
      items: this.fb.array([])
    });

    this.loadEmployees();
    if (this.id) {
      this.loadRequest();
    }
  }

  private loadEmployees(): void {
    this.employeeSvc.getAll().subscribe({
      next: res => {
        this.employees = res.map((e: any) => ({
          accountId: e.Account?.id,
          displayName: `${e.Account?.firstName ?? ''} ${e.Account?.lastName ?? ''} (${e.Account?.email ?? ''})`
        }));
      },
      error: err => console.error('Failed to load employees', err)
    });
  }

  private loadRequest(): void {
    this.loading = true;
    this.requestSvc.getById(this.id).subscribe({
      next: (res: RequestDto) => {
        this.form.patchValue({
          accountId: res.Account?.id ?? '',
          type: res.type ?? '',
          status: res.status ?? 'pending'
        });

        this.items.clear();
        let parsed: any[] = [];
        try {
          parsed = typeof res.items === 'string' ? JSON.parse(res.items) : res.items;
        } catch {
          parsed = [];
        }
        parsed.forEach(it => this.items.push(this.newItem(it)));

        this.loading = false;
      },
      error: err => {
        console.error('Failed to load request', err);
        this.error = 'Failed to load request';
        this.loading = false;
      }
    });
  }

  get items(): FormArray {
    return this.form.get('items') as FormArray;
  }

  newItem(data?: any): FormGroup {
    return this.fb.group({
      name: [data?.name || '', Validators.required],
      quantity: [data?.quantity || 1, [Validators.required, Validators.min(1)]]
    });
  }

  addItem(): void {
    this.items.push(this.newItem());
  }

  removeItem(i: number): void {
    this.items.removeAt(i);
  }

  save(): void {
    if (this.form.invalid) return;

    this.submitting = true;
    const payload = {
      ...this.form.value,
      items: JSON.stringify(this.form.value.items),
      quantity: this.form.value.items.reduce((s: number, it: any) => s + (Number(it.quantity) || 0), 0)
    };

    this.requestSvc.update(this.id, payload).subscribe({
      next: () => this.router.navigate(['/requests']),
      error: err => {
        console.error('Failed to update request', err);
        this.error = 'Failed to update request';
        this.submitting = false;
      }
    });
  }

  delete(): void {
    if (!this.id) return;
    if (confirm('Are you sure you want to delete this request?')) {
      this.requestSvc.delete(this.id).subscribe({
        next: () => this.router.navigate(['/requests']),
        error: err => {
          console.error('Failed to delete request', err);
          this.error = 'Failed to delete request';
          this.submitting = false;
        }
      });
    }
  }

  cancel(): void {
    this.router.navigate(['/requests']);
  }
}


================================================================================
File: src\app\requests\request-routing.module.ts
Size: 693 B
================================================================================

// src/app/requests/request-routing.module.ts
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { RequestsComponent } from './requests.component';
import { RequestAddComponent } from './request-add.component';
import { RequestEditComponent } from './request-edit.component';

const routes: Routes = [
  { path: '', component: RequestsComponent },
  { path: 'add', component: RequestAddComponent },      // 👈 Add only
  { path: 'edit/:id', component: RequestEditComponent } // 👈 Edit only
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class RequestRoutingModule {}


================================================================================
File: src\app\requests\request.model.ts
Size: 721 B
================================================================================

// src/app/requests/request.model.ts

/**
 * Raw object as it comes from backend API
 */
export interface RequestDto {
  id?: number;
  type?: string;
  status?: string;
  items?: any;

  // legacy / optional mappings
  employeeId?: string;
  employeeCode?: string;

  Account?: {
    id?: number;            // 👈 add this (backend sends it)
    email?: string;
    firstName?: string;
    lastName?: string;
    role?: string;
  };
}

/**
 * Normalized object for frontend display
 */
export interface RequestView {
  id?: number;
  type?: string;
  status?: string;

  employeeId?: string;
  employeeDisplay: string;
  itemsDisplay: Array<{ name?: string; quantity?: number }>;
}


================================================================================
File: src\app\requests\requests.component.html
Size: 2.7 kB
================================================================================

<div class="container mt-4">
  <div class="d-flex justify-content-between align-items-center mb-3">
    <h1 class="mb-0">Requests</h1>
  </div>

  <!-- Loading / Error -->
  <div *ngIf="loading" class="alert alert-info">Loading…</div>
  <div *ngIf="error" class="alert alert-danger">{{ error }}</div>

  <!-- Requests Table -->
  <div *ngIf="requests.length && !loading">
    <table class="table table-striped align-middle">
      <thead class="table-light">
        <tr>
          <th>Type</th>
          <th>Employee</th>
          <th>Items</th>
          <th>Status</th>
          <th class="text-center">Actions</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let r of requests">
          <td class="text-capitalize">{{ r.type }}</td>
          <td>{{ r.employeeDisplay }}</td>
          <td>
            <ul class="list-unstyled mb-0">
              <li *ngFor="let item of r.itemsDisplay">
                {{ item.name }} <span class="text-muted">(x{{ item.quantity }})</span>
              </li>
            </ul>
          </td>
          <td>
            <span
              class="badge px-3 py-2 text-capitalize"
              [ngClass]="{
                'bg-success': r.status?.toLowerCase() === 'approved',
                'bg-warning text-dark': r.status?.toLowerCase() === 'pending',
                'bg-danger': r.status?.toLowerCase() === 'rejected' || r.status?.toLowerCase() === 'disapproved',
                'bg-secondary': !r.status
              }">
              {{ r.status || '—' }}
            </span>
          </td>
          <td class="text-center">
            <!-- Edit button -->
            <button
              *ngIf="r.id"
              class="btn btn-sm btn-primary me-2"
              [routerLink]="['/requests/edit', r.id]">
              <i class="bi bi-pencil-square"></i> Edit
            </button>

            <!-- Delete button -->
            <!-- <button
              class="btn btn-sm btn-danger"
              (click)="delete(r.id!)">
              <i class="bi bi-trash"></i> Delete
            </button> -->
          </td>
        </tr>
      </tbody>
    </table>

    <!-- Add New Request Button at bottom-right -->
    <div class="d-flex justify-content-end mt-3">
      <button class="btn btn-primary" routerLink="/requests/add">
        Add Request
      </button>
    </div>
  </div>

  <!-- Empty State -->
  <div *ngIf="!requests.length && !loading" class="text-center py-5 text-muted">
    <p>No requests found.</p>
    <button class="btn btn-success" routerLink="/requests/add">
      + Add Request
    </button>
  </div>
</div>


================================================================================
File: src\app\requests\requests.component.ts
Size: 2.14 kB
================================================================================

// src/app/requests/requests.component.ts
import { Component, OnInit } from '@angular/core';
import { RequestService } from '@app/_services/request.service';
import { RequestDto, RequestView } from './request.model';

@Component({
  selector: 'app-requests',
  templateUrl: './requests.component.html'
})
export class RequestsComponent implements OnInit {
  requests: RequestView[] = [];
  loading = false;
  error = '';

  constructor(private requestSvc: RequestService) {}

  ngOnInit(): void {
    this.load();
  }

  load(): void {
    this.loading = true;
    this.requestSvc.getAll().subscribe({
      next: (list: RequestDto[]) => {
        this.requests = list.map(r => ({
          // ✅ make sure id is always mapped
          id: r.id ?? (r as any).requestId ?? (r as any).RequestID ?? null,
          type: r.type,
          status: r.status,
          employeeId: r.employeeId ?? r.employeeCode ?? '',
          employeeDisplay: r.Account
            ? `${r.Account.firstName ?? ''} ${r.Account.lastName ?? ''} (${r.Account.email ?? ''})`
            : '—',
          itemsDisplay: this.normalizeItems(r.items)
        }));
        this.loading = false;
      },
      error: (err: any) => {
        console.error('Failed to load requests', err);
        this.error = 'Failed to load requests';
        this.loading = false;
      }
    });
  }

  delete(id: number): void {
    if (!id) return;

    if (confirm('Are you sure you want to delete this request?')) {
      this.requestSvc.delete(id).subscribe({
        next: () => {
          this.requests = this.requests.filter(r => r.id !== id);
        },
        error: (err: any) => {
          console.error('Failed to delete request', err);
          this.error = 'Failed to delete request';
        }
      });
    }
  }

  private normalizeItems(raw: any): Array<{ name?: string; quantity?: number }> {
    let parsed: any[] = [];
    try {
      parsed = typeof raw === 'string' ? JSON.parse(raw) : raw;
    } catch {
      parsed = [];
    }
    return Array.isArray(parsed) ? parsed : [];
  }
}


================================================================================
File: src\app\requests\requests.module.ts
Size: 883 B
================================================================================

import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';

import { RequestsComponent } from './requests.component';
import { RequestAddComponent } from './request-add.component';
import { RequestEditComponent } from './request-edit.component';
import { RequestRoutingModule } from './request-routing.module';

@NgModule({
  declarations: [
    RequestsComponent,
    RequestAddComponent,
    RequestEditComponent
  ],
  imports: [
    CommonModule,
    FormsModule,            // ✅ for ngModel, pipes like titlecase
    ReactiveFormsModule,    // ✅ fixes formGroup, formArray, formGroupName
    RouterModule,           // ✅ fixes routerLink
    RequestRoutingModule
  ]
})
export class RequestsModule {}


================================================================================
File: src\app\script.js
Size: 37.51 kB
================================================================================


        // In-memory data store
        let users = [
            { id: 1, email: 'admin@example.com' },
            { id: 2, email: 'user@example.com' },
            { id: 3, email: 'user2@example.com' }
        ];

        let accounts = [
            { id: 1, title: 'Mr', firstName: 'Admin', lastName: 'User', email: 'admin@example.com', role: 'Admin', status: 'Active' },
            { id: 2, title: 'Ms', firstName: 'Normal', lastName: 'User', email: 'user@example.com', role: 'User', status: 'Active' },
            { id: 3, title: 'Dr', firstName: 'Inactive', lastName: 'Person', email: 'inactive@example.com', role: 'User', status: 'Inactive' }
        ];

        let employees = [
            { id: 1, employeeId: 'EMP001', userId: 1, /* accountId: 1, */ position: 'Developer', departmentId: 1, hireDate: '2025-01-01', status: 'Active' },
            { id: 2, employeeId: 'EMP002', userId: 2, /* accountId: 2, */ position: 'Designer', departmentId: 2, hireDate: '2025-02-01', status: 'Active' }
        ];

        let departments = [
            { id: 1, name: 'Engineering', description: 'Software development team' },
            { id: 2, name: 'Marketing', description: 'Marketing team' }
        ];

        let workflows = [
            { id: 1, employeeId: 1, type: 'Onboarding', details: { task: 'Setup workstation' }, status: 'Pending' }
        ];

        let requests = [
            { id: 1, employeeId: 2, type: 'Equipment', requestItems: [{ name: 'Laptop', quantity: 1 }], status: 'Pending' },
            { id: 2, employeeId: 1, type: 'Leave', requestItems: [{ name: 'Vacation', quantity: 5 }], status: 'Approved' }
        ];

        let currentEmployeeId = null;
        let currentWorkflowEmployeeId = null;
        let currentEditId = null;
        let alertTimeout = null; // To manage the alert timeout

        // --- Helper Functions ---
        function showGlobalAlert(message, type = 'success') {
            const placeholder = document.getElementById('global-alert-placeholder');
            const alertType = type === 'info' ? 'alert-info' : (type === 'error' ? 'alert-danger' : 'alert-success'); // Map type to Bootstrap class
            placeholder.innerHTML = `
                <div class="alert ${alertType} alert-dismissible fade show" role="alert">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            `;

            // Clear previous timeout if exists
            if (alertTimeout) {
                clearTimeout(alertTimeout);
            }

            // Auto-dismiss after 5 seconds
            alertTimeout = setTimeout(() => {
                const alertElement = placeholder.querySelector('.alert');
                if (alertElement) {
                    // Use Bootstrap's static method to get instance or create it
                    const bsAlert = bootstrap.Alert.getOrCreateInstance(alertElement);
                    if (bsAlert) { // Check if instance was successfully obtained/created
                         bsAlert.close();
                    }
                }
            }, 5000); // 5000 milliseconds = 5 seconds
        }

        // Navigation
        function showSection(section) {
             // Clear any existing global alert when changing sections
            const placeholder = document.getElementById('global-alert-placeholder');
            if (placeholder) placeholder.innerHTML = '';
            if (alertTimeout) clearTimeout(alertTimeout); // Clear timeout too

            document.querySelectorAll('.container > div').forEach(div => div.classList.add('hidden'));
            document.getElementById(`${section}-section`).classList.remove('hidden');
            if (section === 'employees') renderEmployees();
            if (section === 'departments') renderDepartments();
            if (section === 'accounts') renderAccounts();
            if (section === 'workflows') renderWorkflows();
            if (section === 'requests') renderRequests();
        }

        // Employees
        function renderEmployees() {
            const tbody = document.getElementById('employees-table-body');
            tbody.innerHTML = '';
            employees.forEach(emp => {
                const account = accounts.find(account => account.id === emp.userId);
                const dept = departments.find(d => d.id === emp.departmentId);
                tbody.innerHTML += `
                    <tr>
                        <td>${emp.employeeId}</td>
                        <td>${account ? account.email : 'N/A'}</td>
                        <td>${emp.position}</td>
                        <td>${dept ? dept.name : 'N/A'}</td>
                        <td>${new Date(emp.hireDate).toLocaleDateString()}</td>
                        <td><span class="badge ${emp.status === 'Active' ? 'bg-success' : 'bg-danger'}">${emp.status}</span></td>
                        <td>
                            <button class="btn btn-sm btn-info action-btn me-1" onclick="viewRequests(${emp.id})">Requests</button>
                            <button class="btn btn-sm btn-info action-btn me-1" onclick="viewWorkflows(${emp.id})">Workflows</button>
                            <button class="btn btn-sm btn-warning action-btn me-1" onclick="showTransferModal(${emp.id})">Transfer</button>
                            <button class="btn btn-sm btn-primary action-btn" onclick="showEmployeeForm(${emp.id})">Edit</button>
                        </td>
                    </tr>
                `;
            });
        }

        function showEmployeeForm(id) {
            currentEditId = id;
            document.getElementById('employee-form-title').textContent = id ? 'EDIT EMPLOYEE' : 'ADD EMPLOYEE';
            const employee = id ? employees.find(e => e.id === id) : null; // Find the employee being edited, if any
            document.getElementById('employee-id').value = employee ? employee.employeeId : `EMP${String(employees.length + 1).padStart(3, '0')}`;
            document.getElementById('employee-id').disabled = !!id;

            const userSelect = document.getElementById('employee-user');

            // 1. Start with accounts that are 'Active'
            let accountsToShow = accounts.filter(account => account.status === 'Active');

            // 2. Handle the edge case for editing:
            // If we are editing an existing employee (employee object exists)
            // AND that employee is currently assigned a userId
            if (employee && employee.userId) {
                // Find the full account object currently assigned to the employee
                const currentAssignedAccount = accounts.find(account => account.id === employee.userId);

                // If the currently assigned account exists BUT is Inactive
                // AND it's not already in our list (which it shouldn't be due to the filter, but check anyway)
                if (currentAssignedAccount && currentAssignedAccount.status === 'Inactive' && !accountsToShow.some(a => a.id === currentAssignedAccount.id)) {
                    // Add this specific inactive account to the list just for this edit session
                    accountsToShow.push(currentAssignedAccount);
                    // Optional: You might want to sort the list again if adding the inactive one messes up the order
                    // accountsToShow.sort((a, b) => a.email.localeCompare(b.email));
                }
            }

            // 3. Populate the dropdown using the filtered/augmented list
            userSelect.innerHTML = accountsToShow.map(account => {
                // Add a visual indicator "[Inactive]" for clarity if showing an inactive one
                const displayText = `${account.email} (${account.firstName} ${account.lastName})${account.status === 'Inactive' ? ' [Inactive]' : ''}`;
                // Check if this account should be selected (matches the employee being edited)
                const isSelected = employee && employee.userId === account.id;
                return `<option value="${account.id}" ${isSelected ? 'selected' : ''}>${displayText}</option>`;
            }).join('');

            // --- Rest of the function remains the same ---
            document.getElementById('employee-position').value = employee ? employee.position : '';
            const deptSelect = document.getElementById('employee-department');
            deptSelect.innerHTML = departments.map(d => `<option value="${d.id}" ${employee && employee.departmentId === d.id ? 'selected' : ''}>${d.name}</option>`).join('');
            document.getElementById('employee-hire-date').value = employee ? employee.hireDate : '';
            document.getElementById('employee-status').value = employee ? employee.status : 'Active';
            document.getElementById('employee-form-error').classList.add('hidden');
            showSection('employee-form');
        }

        function saveEmployee() {
            const employeeId = document.getElementById('employee-id').value;
            const userId = parseInt(document.getElementById('employee-user').value);
            // const accountId = document.getElementById('employee-account').value ? parseInt(document.getElementById('employee-account').value) : null; // REMOVED
            const position = document.getElementById('employee-position').value;
            const departmentId = parseInt(document.getElementById('employee-department').value);
            const hireDate = document.getElementById('employee-hire-date').value;
            const status = document.getElementById('employee-status').value;
            const error = document.getElementById('employee-form-error');

            // if (!employeeId || !userId || !position || !departmentId || !hireDate) { // Original check
            if (!employeeId || !userId || !position || !departmentId || !hireDate || !status) { // Updated check (accountId removed)
                // error.textContent = 'All fields except Account are required'; // Original message
                error.textContent = 'All fields are required'; // Updated message
                error.classList.remove('hidden');
                return;
            }

            if (currentEditId) {
                const employee = employees.find(e => e.id === currentEditId);
                employee.employeeId = employeeId;
                employee.userId = userId;
                employee.position = position;
                employee.departmentId = departmentId;
                employee.hireDate = hireDate;
                employee.status = status;
            } else {
                // *** Adding NEW employee ***

                // 1. Calculate the new Employee's internal ID
                // Use Math.max to handle potential gaps if deletion were implemented
                const newEmployeeInternalId = employees.length > 0 ? Math.max(...employees.map(e => e.id)) + 1 : 1;

                // 2. Push the new employee object
                employees.push({
                    id: newEmployeeInternalId,
                    employeeId: employeeId,
                    userId,
                    // accountId, // REMOVED
                    position,
                    departmentId,
                    hireDate,
                    status
                });

                // 3. *** Automatically create a default workflow ***
                // Calculate new Workflow ID
                const newWorkflowId = workflows.length > 0 ? Math.max(...workflows.map(w => w.id)) + 1 : 1;

                // Define the default workflow object
                const defaultWorkflow = {
                    id: newWorkflowId,
                    employeeId: newEmployeeInternalId, // Link to the new employee's internal ID
                    type: 'Onboarding',
                    details: { task: 'Complete HR Forms', step: 1 }, // Example details
                    status: 'Pending'
                };

                // Add the workflow to the main workflows array
                workflows.push(defaultWorkflow);
                console.log('Added default workflow for new employee:', defaultWorkflow); // Optional: for debugging

                // You could add more default workflows here if needed by repeating step 3
                // Example: Add another workflow
                // const newWorkflowId2 = workflows.length > 0 ? Math.max(...workflows.map(w => w.id)) + 1 : 1;
                // workflows.push({
                //     id: newWorkflowId2,
                //     employeeId: newEmployeeInternalId,
                //     type: 'IT Setup',
                //     details: { task: 'Request Laptop', step: 1 },
                 //     status: 'Pending'
                 // });
                 showGlobalAlert(`Onboarding workflow created for new employee ${employeeId}.`, 'info'); // Workflow feedback
            }
            currentEditId = null;
            showSection('employees');
        }

        function showTransferModal(id) {
            currentEmployeeId = id;
            const employee = employees.find(e => e.id === id);
            document.getElementById('transferModalLabel').textContent = `Transfer Employee: ${employee.employeeId}`;
            const deptSelect = document.getElementById('transfer-department');
            deptSelect.innerHTML = departments.map(d => `<option value="${d.id}" ${employee.departmentId === d.id ? 'selected' : ''}>${d.name}</option>`).join('');
            const modal = new bootstrap.Modal(document.getElementById('transferModal'));
            modal.show();
        }

        function transferEmployee() {
            const newDepartmentId = parseInt(document.getElementById('transfer-department').value);
            const employee = employees.find(e => e.id === currentEmployeeId);

            // Ensure employee exists and department is actually changing
            if (!employee || employee.departmentId === newDepartmentId) {
                // If employee not found or department is the same, just close the modal
                const modal = bootstrap.Modal.getInstance(document.getElementById('transferModal'));
                if (modal) { // Check if modal instance exists before hiding
                   modal.hide();
                }
                // Optionally, show a message if the department didn't change
                // alert('Employee is already in this department.');
                return; // Exit the function
            }

            const oldDepartmentId = employee.departmentId; // Store the old department ID

            // Update the employee's department
            employee.departmentId = newDepartmentId;

            // --- Add Workflow Logic ---
            // 1. Get Department Names for details (optional but nice)
            const oldDept = departments.find(d => d.id === oldDepartmentId);
            const newDept = departments.find(d => d.id === newDepartmentId);
            const oldDeptName = oldDept ? oldDept.name : 'Unknown Department';
            const newDeptName = newDept ? newDept.name : 'Unknown Department';

            // 2. Calculate new Workflow ID
            const newWorkflowId = workflows.length > 0 ? Math.max(...workflows.map(w => w.id)) + 1 : 1;

            // 3. Define the transfer workflow object
            const transferWorkflow = {
                id: newWorkflowId,
                employeeId: currentEmployeeId, // Link to the transferred employee's internal ID
                type: 'Department Transfer',
                details: {
                    message: `Employee transferred from ${oldDeptName} to ${newDeptName}.`,
                    previousDepartmentId: oldDepartmentId,
                    newDepartmentId: newDepartmentId
                 },
                status: 'Pending' // Or 'Completed' if it's just informational
            };

            // 4. Add the workflow to the main workflows array
            workflows.push(transferWorkflow);
            console.log('Added department transfer workflow:', transferWorkflow); // Optional: for debugging
            // --- End of Workflow Logic ---


// Hide the modal
const modal = bootstrap.Modal.getInstance(document.getElementById('transferModal'));
if (modal) { // Check if modal instance exists before hiding
   modal.hide();
}

// Re-render the employee list to show the updated department
renderEmployees();
renderDepartments(); // Added line to update department counts
showGlobalAlert(`Department transfer workflow created for employee ${employee.employeeId}.`, 'info'); // Workflow feedback
        }

        // Departments
        function renderDepartments() {
            const tbody = document.getElementById('departments-table-body');
            tbody.innerHTML = '';
            departments.forEach(dept => {
                const employeeCount = employees.filter(e => e.departmentId === dept.id).length;
                tbody.innerHTML += `
                    <tr>
                        <td>${dept.name}</td>
                        <td>${dept.description}</td>
                        <td>${employeeCount}</td>
                        <td>
                            <button class="btn btn-sm btn-primary action-btn me-1" onclick="showDepartmentForm(${dept.id})">Edit</button>
                        </td>
                    </tr>
                `;
            });
        }

        function showDepartmentForm(id) {
            currentEditId = id;
            document.getElementById('department-form-title').textContent = id ? 'EDIT DEPARTMENT' : 'ADD DEPARTMENT';
            const department = id ? departments.find(d => d.id === id) : null;
            document.getElementById('department-name').value = department ? department.name : '';
            document.getElementById('department-description').value = department ? department.description : '';
            document.getElementById('department-form-error').classList.add('hidden');
            showSection('department-form');
        }

        function saveDepartment() {
            const name = document.getElementById('department-name').value;
            const description = document.getElementById('department-description').value;
            const error = document.getElementById('department-form-error');

            if (!name || !description) {
                error.textContent = 'All fields are required';
                error.classList.remove('hidden');
                return;
            }

            if (currentEditId) {
                const department = departments.find(d => d.id === currentEditId);
                department.name = name;
                department.description = description;
            } else {
                departments.push({
                    id: departments.length + 1,
                    name,
                    description
                });
            }
            currentEditId = null;
            showSection('departments');
        }

        // Accounts
        function renderAccounts() {
            const tbody = document.getElementById('accounts-table-body');
            tbody.innerHTML = '';
            accounts.forEach(account => {
                tbody.innerHTML += `
                    <tr>
                        <td>${account.title}</td>
                        <td>${account.firstName}</td>
                        <td>${account.lastName}</td>
                        <td>${account.email}</td>
                        <td>${account.role}</td>
                        <td><span class="badge ${account.status === 'Active' ? 'bg-success' : 'bg-danger'}">${account.status}</span></td>
                        <td>
                            <button class="btn btn-sm btn-primary action-btn me-1" onclick="showAccountForm(${account.id})">Edit</button>
                            <!-- Add Delete button if needed -->
                        </td>
                    </tr>
                `;
            });
        }

        function showAccountForm(id) {
            currentEditId = id; // Use the global currentEditId
            document.getElementById('account-form-title').textContent = id ? 'EDIT ACCOUNT' : 'ADD ACCOUNT';
            const account = id ? accounts.find(a => a.id === id) : null;

            // Populate form fields
            document.getElementById('account-id').value = account ? account.id : ''; // Store ID if editing
            document.getElementById('account-title').value = account ? account.title : 'Mr';
            document.getElementById('account-firstName').value = account ? account.firstName : '';
            document.getElementById('account-lastName').value = account ? account.lastName : '';
            document.getElementById('account-email').value = account ? account.email : '';
            document.getElementById('account-role').value = account ? account.role : 'User';
            document.getElementById('account-status').value = account ? account.status : 'Active';

            document.getElementById('account-form-error').classList.add('hidden'); // Hide error message
            showSection('account-form');
        }

        function saveAccount() {
            // Read values from form
            const id = currentEditId; // Use the global currentEditId
            const title = document.getElementById('account-title').value;
            const firstName = document.getElementById('account-firstName').value;
            const lastName = document.getElementById('account-lastName').value;
            const email = document.getElementById('account-email').value;
            const role = document.getElementById('account-role').value;
            const status = document.getElementById('account-status').value;
            const error = document.getElementById('account-form-error');

            // Basic Validation
if (!firstName || !lastName || !email) {
    error.textContent = 'First Name, Last Name, and Email are required.';
    error.classList.remove('hidden');
    return;
} 

// else if (!/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/.test(email)) {
//     error.textContent = 'Invalid email format.';
//     error.classList.remove('hidden');
//     return;
// }
             // Optional: Add email format validation if desired

            if (id) {
                // Editing existing account
                const account = accounts.find(a => a.id === id);
                if (account) {
                    account.title = title;
                    account.firstName = firstName;
                    account.lastName = lastName;
                    account.email = email;
                    account.role = role;
                    account.status = status;
                }
            } else {
                // Adding new account
                const newId = accounts.length > 0 ? Math.max(...accounts.map(a => a.id)) + 1 : 1; // Simple way to get next ID
                accounts.push({
                    id: newId,
                    title,
                    firstName,
                    lastName,
                    email,
                    role,
                    status
                });
            }

            currentEditId = null; // Reset edit ID
            showSection('accounts'); // Go back to the accounts list
        }

        // Workflows
        function viewWorkflows(employeeId) {
            currentWorkflowEmployeeId = employeeId;
            const employee = employees.find(e => e.id === employeeId);
            document.getElementById('workflows-title').textContent = `WORKFLOWS FOR EMPLOYEE ${employee.employeeId}`;
            renderWorkflows();
            showSection('workflows');
        }

        function renderWorkflows() {
            const tbody = document.getElementById('workflows-table-body');
            tbody.innerHTML = ''; // Clear existing rows
            const employeeWorkflows = workflows.filter(w => w.employeeId === currentWorkflowEmployeeId);

            if (employeeWorkflows.length === 0) {
                tbody.innerHTML = '<tr><td colspan="4" class="text-center text-muted">No workflows found for this employee.</td></tr>';
                return; // Stop if no workflows
            }

            employeeWorkflows.forEach(w => {
                // 1. Determine Status Badge Class
                let statusClass = 'bg-secondary'; // Default/fallback
                let statusTextClass = ''; // For text color on specific badges
                switch (w.status) {
                    case 'Pending':
                        statusClass = 'bg-warning';
                        statusTextClass = 'text-dark'; // Dark text on yellow is often more readable
                        break;
                    case 'Approved':
                        statusClass = 'bg-success';
                        break;
                    case 'Rejected':
                        statusClass = 'bg-danger';
                        break;
                    // Add more cases if needed
                }

                // 2. Format Details Column (make it more readable than JSON)
                let detailsHtml = '';
                try {
                    if (typeof w.details === 'object' && w.details !== null) {
                        if (w.type === 'Onboarding' && w.details.task) {
                             detailsHtml = `Task: ${w.details.task}${w.details.step ? ' (Step ' + w.details.step + ')' : ''}`;
                        } else if (w.type === 'Department Transfer' && w.details.message) {
                             detailsHtml = w.details.message;
                        } else {
                            // Generic fallback for other object details
                            detailsHtml = Object.entries(w.details)
                                                .map(([key, value]) => `<strong>${key}:</strong> ${value}`)
                                                .join('<br>');
                        }
                    } else {
                        detailsHtml = w.details; // Display as is if not a typical object
                    }
                } catch (e) {
                    console.error("Error formatting workflow details:", e);
                    detailsHtml = JSON.stringify(w.details); // Fallback to JSON on error
                }


                // 3. Build Table Row HTML
                tbody.innerHTML += `
                    <tr>
                        <td>${w.type}</td>
                        <td>${detailsHtml}</td>
                        <td>
                            <span class="badge ${statusClass} ${statusTextClass}">${w.status}</span>
                        </td>
                        <td>
                            <select class="form-select form-select-sm d-inline-block w-auto" onchange="updateWorkflowStatus(${w.id}, this.value)">
                                <option value="Pending" ${w.status === 'Pending' ? 'selected' : ''}>Pending</option>
                                <option value="Approved" ${w.status === 'Approved' ? 'selected' : ''}>Approved</option>
                                <option value="Rejected" ${w.status === 'Rejected' ? 'selected' : ''}>Rejected</option>
                                <!-- Add other potential statuses here if needed -->
                            </select>
                        </td>
                    </tr>
                `;
            });
        }

        function updateWorkflowStatus(id, status) {
            const workflow = workflows.find(w => w.id === id);
            workflow.status = status;
            renderWorkflows();
        }

        // Requests
        function viewRequests(employeeId) {
            showSection('requests');
        }

        function renderRequests() {
            const tbody = document.getElementById('requests-table-body');
            tbody.innerHTML = ''; // Clear existing rows

            // 1. Handle case where there are no requests
            if (requests.length === 0) {
                tbody.innerHTML = '<tr><td colspan="5" class="text-center text-muted">No requests found.</td></tr>'; // Colspan matches number of columns
                return; // Stop if no requests
            }

            requests.forEach(req => {
                // 2. Get Employee and associated Account info for better display
                const employee = employees.find(e => e.id === req.employeeId);
                const account = employee ? accounts.find(acc => acc.id === employee.userId) : null;
                // Display account email/name if available, otherwise fallback to employee ID
                const employeeDisplay = account ? `${account.email} (${account.firstName} ${account.lastName})` : (employee ? employee.employeeId : 'N/A');

                // 3. Determine Status Badge Class
                let statusClass = 'bg-secondary'; // Default/fallback
                let statusTextClass = ''; // For text color on specific badges
                switch (req.status) {
                    case 'Pending':
                        statusClass = 'bg-warning';
                        statusTextClass = 'text-dark'; // Dark text on yellow is often more readable
                        break;
                    case 'Approved':
                        statusClass = 'bg-success';
                        break;
                    case 'Rejected':
                        statusClass = 'bg-danger';
                        break;
                    // Add more cases if needed (e.g., 'Processing', 'Completed')
                }

                // 4. Build Table Row HTML
                tbody.innerHTML += `
                    <tr>
                        <td>${req.type}</td>
                        <td>${employeeDisplay}</td> <!-- Use the enhanced display name -->
                        <td>
                            <!-- Use list-unstyled for less default styling, mb-0 to remove bottom margin -->
                            <ul class="list-unstyled mb-0">
                                ${req.requestItems.map(item => `<li>${item.name} (x${item.quantity})</li>`).join('')}
                            </ul>
                        </td>
                        <td>
                            <!-- Display status using a badge -->
                            <span class="badge ${statusClass} ${statusTextClass}">${req.status}</span>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-primary action-btn me-1" onclick="showRequestForm(${req.id})">Edit</button>
                            <!-- Consider adding Approve/Reject buttons here later -->
                        </td>
                    </tr>
                `;
            });
        }

        function showRequestForm(id) {
            currentEditId = id;
            document.getElementById('request-form-title').textContent = id ? 'EDIT REQUEST' : 'ADD REQUEST';
            const request = id ? requests.find(r => r.id === id) : null;
            document.getElementById('request-type').value = request ? request.type : 'Equipment';
            const employeeSelect = document.getElementById('request-employee');
            employeeSelect.innerHTML = employees.map(e => `<option value="${e.id}" ${request && request.employeeId === e.id ? 'selected' : ''}>${e.employeeId}</option>`).join('');
            const itemsDiv = document.getElementById('request-items');
            itemsDiv.innerHTML = '';
            if (request) {
                request.requestItems.forEach((item, index) => addRequestItem(item.name, item.quantity));
            } else {
                addRequestItem();
            }
            document.getElementById('request-form-error').classList.add('hidden');
            showSection('request-form');
        }

        function addRequestItem(name = '', quantity = 1) {
            const itemsDiv = document.getElementById('request-items');
            const index = itemsDiv.children.length;
            itemsDiv.innerHTML += `
                <div class="border p-2 mb-2" id="request-item-${index}">
                    <div class="row">
                        <div class="col-md-5">
                            <label class="form-label">Name</label>
                            <input type="text" class="form-control request-item-name" value="${name}">
                        </div>
                        <div class="col-md-5">
                            <label class="form-label">Quantity</label>
                            <input type="number" class="form-control request-item-quantity" value="${quantity}" min="1">
                        </div>
                        <div class="col-md-2 d-flex align-items-end">
                            <button class="btn btn-danger" onclick="removeRequestItem(${index})">Remove</button>
                        </div>
                    </div>
                </div>
            `;
        }

        function removeRequestItem(index) {
            document.getElementById(`request-item-${index}`).remove();
        }

        function saveRequest() {
            const type = document.getElementById('request-type').value;
            const employeeId = parseInt(document.getElementById('request-employee').value);
            const items = Array.from(document.querySelectorAll('#request-items > div')).map(div => ({
                name: div.querySelector('.request-item-name').value,
                quantity: parseInt(div.querySelector('.request-item-quantity').value)
            }));
            const error = document.getElementById('request-form-error');

            if (!type || !employeeId || items.length === 0 || items.some(item => !item.name || !item.quantity)) {
                error.textContent = 'All fields are required';
                error.classList.remove('hidden');
                return;
            }

            if (currentEditId) {
                const request = requests.find(r => r.id === currentEditId);
                request.type = type;
                request.employeeId = employeeId;
                request.requestItems = items;
            } else {
                // requests.push({
                //     id: requests.length + 1,
                //     employeeId,
                //     type,
                //     requestItems: items,
                //     status: 'Pending'
                // });

                // *** Adding NEW request ***

                // 1. Calculate the new Request ID
                const newRequestId = requests.length > 0 ? Math.max(...requests.map(r => r.id)) + 1 : 1;

                // 2. Push the new request object
                requests.push({
                    id: newRequestId,
                    employeeId, // Requester's ID
                    type,
                    requestItems: items,
                    status: 'Pending' // Initial status of the request
                });

                // 3. *** Automatically create a corresponding workflow ***
                // Calculate new Workflow ID
                const newWorkflowId = workflows.length > 0 ? Math.max(...workflows.map(w => w.id)) + 1 : 1;

                // Determine who the workflow is assigned to (e.g., a specific admin/manager ID)
                // For this demo, let's assume employee with internal ID 1 (Admin User) approves requests.
                const approverEmployeeId = 1; // Assign workflow task to employee ID 1

                // Define the approval workflow object
                const approvalWorkflow = {
                    id: newWorkflowId,
                    employeeId: approverEmployeeId, // Assign task to the approver
                    type: 'Request Approval',
                    details: {
                        requestId: newRequestId, // Link back to the request
                        requestType: type,
                        requesterId: employeeId, // Store who made the request
                        message: `Review ${type} request #${newRequestId} from Employee ID ${employeeId}.`
                    },
                    status: 'Pending' // Initial status of the workflow task
                };

                // Add the workflow to the main workflows array
                workflows.push(approvalWorkflow);
                console.log('Added request approval workflow:', approvalWorkflow); // Optional: for debugging
                showGlobalAlert(`Created ${type} approval workflow for request #${newRequestId} (Employee ID: ${employeeId})`, 'info');
            }
            currentEditId = null;
            showSection('requests');
        }

        // Initial render
        showSection('accounts');

================================================================================
File: src\app\workflows\workflows-routing.module.ts
Size: 489 B
================================================================================

// src/app/workflows/workflows-routing.module.ts
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { WorkflowsComponent } from './workflows.component';
import { AuthGuard } from '../_helpers';

const routes: Routes = [
  { path: '', component: WorkflowsComponent, canActivate: [AuthGuard] }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class WorkflowsRoutingModule {}


================================================================================
File: src\app\workflows\workflows.component.html
Size: 2.54 kB
================================================================================

<div class="container mt-4">
  <h2 *ngIf="!employeeId">All Workflows</h2>
  <h2 *ngIf="employeeId">Workflows for Employee: <u>{{ employeeId }}</u></h2>

  <!-- Loading & Errors -->
  <div *ngIf="loading" class="alert alert-info">Loading workflows...</div>
  <div *ngIf="error" class="alert alert-danger">{{ error }}</div>

  <!-- Workflows Table -->
  <table *ngIf="!loading && workflows.length > 0" class="table table-striped mt-3">
    <thead>
      <tr>
        <th>Type</th>
        <th>Details</th>
        <th>Status</th>
        <th style="width: 280px">Actions</th>
        <th>Created At</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let wf of workflows">
        <td>{{ wf.type }}</td>
        <td>{{ wf.details }}</td>

        <!-- ✅ Status Badge -->
        <td>
          <span class="badge" [ngClass]="getStatusClass(wf.status)">
            {{ wf.status | titlecase }}
          </span>
        </td>

        <!-- ✅ Action Buttons -->
        <td>
          <div class="d-flex align-items-center gap-2">
            <!-- Show only if NOT pending -->
            <button
              *ngIf="wf.status !== 'pending'"
              class="btn btn-sm btn-warning text-dark"
              (click)="updateStatus(wf, 'pending')"
              [disabled]="isUpdating(wf.id)"
            >
              Pending
            </button>

            <!-- Show only if NOT approved -->
            <button
              *ngIf="wf.status !== 'approved'"
              class="btn btn-sm btn-success"
              (click)="updateStatus(wf, 'approved')"
              [disabled]="isUpdating(wf.id)"
            >
              Approve
            </button>

            <!-- Show only if NOT rejected -->
            <button
              *ngIf="wf.status !== 'rejected'"
              class="btn btn-sm btn-danger"
              (click)="updateStatus(wf, 'rejected')"
              [disabled]="isUpdating(wf.id)"
            >
              Reject
            </button>

            <!-- Spinner -->
            <div
              *ngIf="isUpdating(wf.id)"
              class="spinner-border spinner-border-sm"
              role="status"
            ></div>
          </div>
        </td>

        <td>{{ wf.createdAt | date: 'yyyy-MM-dd HH:mm' }}</td>
      </tr>
    </tbody>
  </table>

  <!-- No Workflows -->
  <div *ngIf="!loading && workflows.length === 0" class="alert alert-warning">
    No workflows found.
  </div>
</div>


================================================================================
File: src\app\workflows\workflows.component.ts
Size: 3.36 kB
================================================================================

// src/app/workflows/workflows.component.ts
import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { finalize } from 'rxjs/operators';
import { WorkflowService } from '@app/_services/workflow.service';

@Component({
  selector: 'app-workflows',
  templateUrl: './workflows.component.html'
})
export class WorkflowsComponent implements OnInit {
  workflows: any[] = [];
  employeeId?: string;
  loading = false;
  error: string | null = null;

  // statuses supported by backend
  readonly statuses = ['pending', 'approved', 'rejected'];

  // track updating workflows (for spinners/disabled buttons)
  updatingMap: Record<number | string, boolean> = {};

  constructor(
    private workflowService: WorkflowService,
    private route: ActivatedRoute
  ) {}

  ngOnInit(): void {
    this.employeeId = this.route.snapshot.queryParamMap.get('employeeId') || undefined;
    this.loadWorkflows();
  }

  /** Load all workflows (optionally filtered by employee) */
  loadWorkflows(): void {
    this.loading = true;
    this.error = null;

    this.workflowService.getAll(this.employeeId).subscribe({
      next: (data: any[]) => {
        this.workflows = data || [];
        this.loading = false;
      },
      error: (err: any) => {
        console.error('Error loading workflows', err);
        this.error = 'Failed to load workflows';
        this.loading = false;
      }
    });
  }

  /** Check if workflow is updating */
  isUpdating(id: number | string): boolean {
    return !!this.updatingMap[id];
  }

  /** Map status → badge color */
  getStatusClass(status: string): string {
    const s = (status || '').toLowerCase();
    if (s === 'pending') return 'bg-warning text-dark';
    if (s === 'approved') return 'bg-success';
    if (s === 'rejected') return 'bg-danger';
    return 'bg-secondary';
  }

  /**
   * Update workflow status (Approve/Reject buttons).
   * Optimistic update → call backend → refresh workflow → rollback if failed.
   */
  updateStatus(wf: any, newStatus: string): void {
    if (!wf || wf.id == null) return;
    const prev = wf.status ?? '';
    if (prev.toLowerCase() === newStatus.toLowerCase()) return;
    if (!this.statuses.includes(newStatus.toLowerCase())) {
      alert('Invalid status selected');
      return;
    }

    // optimistic UI update
    wf.status = newStatus;
    this.updatingMap[wf.id] = true;

    this.workflowService
      .update(wf.id, { status: newStatus })
      .pipe(finalize(() => (this.updatingMap[wf.id] = false)))
      .subscribe({
        next: () => {
          // ensure UI matches backend
          this.workflowService.getById(wf.id).subscribe({
            next: fresh => {
              wf.status = fresh?.status ?? newStatus;
            },
            error: err => {
              console.error('Failed to refresh workflow after update', err);
              wf.status = newStatus;
            }
          });
        },
        error: err => {
          console.error('Failed to update workflow status', { wfId: wf.id, err });
          const msg = err?.error?.message || err?.message || 'Failed to update status';
          alert(msg);
          wf.status = prev; // rollback
        }
      });
  }
}


================================================================================
File: src\app\workflows\workflows.module.ts
Size: 557 B
================================================================================

// src/app/workflows/workflows.module.ts
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { RouterModule } from '@angular/router';

import { WorkflowsComponent } from './workflows.component';
import { WorkflowsRoutingModule } from './workflows-routing.module';

@NgModule({
  declarations: [WorkflowsComponent],
  imports: [
    CommonModule,
    FormsModule,
    RouterModule,
    WorkflowsRoutingModule
  ]
})
export class WorkflowsModule {}


================================================================================
File: src\app\_components\alert.component.html
Size: 314 B
================================================================================

﻿<div *ngIf="alerts.length" class="container">
    <div class="m-3">
        <div *ngFor="let alert of alerts" class="{{cssClasses(alert)}}">
            <span [innerHTML]="alert.message"></span>
            <button class="btn-close" (click)="removeAlert(alert)"></button>
        </div>
    </div>
</div>

================================================================================
File: src\app\_components\alert.component.ts
Size: 3.16 kB
================================================================================

﻿import { Component, OnInit, OnDestroy, Input } from '@angular/core';
import { Router, NavigationStart } from '@angular/router';
import { Subscription } from 'rxjs';

import { Alert, AlertType } from '@app/_models';
import { AlertService } from '@app/_services';

@Component({ selector: 'alert', templateUrl: 'alert.component.html' })
export class AlertComponent implements OnInit, OnDestroy {
    @Input() id = 'default-alert';
    @Input() fade = true;

    alerts: Alert[] = [];
    alertSubscription!: Subscription;
    routeSubscription!: Subscription;

    constructor(private router: Router, private alertService: AlertService) { }

    ngOnInit() {
        // subscribe to new alert notifications
        this.alertSubscription = this.alertService.onAlert(this.id)
            .subscribe(alert => {
                // clear alerts when an empty alert is received
                if (!alert.message) {
                    // filter out alerts without 'keepAfterRouteChange' flag
                    this.alerts = this.alerts.filter(x => x.keepAfterRouteChange);

                    // remove 'keepAfterRouteChange' flag on the rest
                    this.alerts.forEach(x => delete x.keepAfterRouteChange);
                    return;
                }

                // add alert to array
                this.alerts.push(alert);

                // auto close alert if required
                if (alert.autoClose) {
                    setTimeout(() => this.removeAlert(alert), 3000);
                }
            });

        // clear alerts on location change
        this.routeSubscription = this.router.events.subscribe(event => {
            if (event instanceof NavigationStart) {
                this.alertService.clear(this.id);
            }
        });
    }

    ngOnDestroy() {
        // unsubscribe to avoid memory leaks
        this.alertSubscription.unsubscribe();
        this.routeSubscription.unsubscribe();
    }

    removeAlert(alert: Alert) {
        // check if already removed to prevent error on auto close
        if (!this.alerts.includes(alert)) return;

        if (this.fade) {
            // fade out alert
            alert.fade = true;

            // remove alert after faded out
            setTimeout(() => {
                this.alerts = this.alerts.filter(x => x !== alert);
            }, 250);
        } else {
            // remove alert
            this.alerts = this.alerts.filter(x => x !== alert);
        }
    }

    cssClasses(alert: Alert) {
        if (!alert) return;

        const classes = ['alert', 'alert-dismissible', 'mt-4', 'container'];

        const alertTypeClass = {
            [AlertType.Success]: 'alert-success',
            [AlertType.Error]: 'alert-danger',
            [AlertType.Info]: 'alert-info',
            [AlertType.Warning]: 'alert-warning'
        }

        if (alert.type !== undefined) {
            classes.push(alertTypeClass[alert.type]);
        }

        if (alert.fade) {
            classes.push('fade');
        }

        return classes.join(' ');
    }
}

================================================================================
File: src\app\_components\index.ts
Size: 36 B
================================================================================

export * from './alert.component';


================================================================================
File: src\app\_helpers\app.initializer.ts
Size: 336 B
================================================================================

import { catchError, of } from 'rxjs';

import { AccountService } from '@app/_services';

export function appInitializer(accountService: AccountService) {
    return () => accountService.refreshToken()
        .pipe(
            // catch error to start app on success or failure
            catchError(() => of())
        );
}

================================================================================
File: src\app\_helpers\auth.guard.ts
Size: 1.13 kB
================================================================================

﻿import { Injectable } from '@angular/core';
import { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';

import { AccountService } from '@app/_services';

@Injectable({ providedIn: 'root' })
export class AuthGuard implements CanActivate {
    constructor(
        private router: Router,
        private accountService: AccountService
    ) { }

    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {
        const account = this.accountService.accountValue;
        if (account) {
            // check if route is restricted by role
            if (route.data.roles && !route.data.roles.includes(account.role)) {
                // role not authorized so redirect to home page
                this.router.navigate(['/']);
                return false;
            }

            // authorized so return true
            return true;
        }

        // not logged in so redirect to login page with the return url 
        this.router.navigate(['/account/login'], { queryParams: { returnUrl: state.url } });
        return false;
    }
}

================================================================================
File: src\app\_helpers\error.interceptor.ts
Size: 988 B
================================================================================

import { Injectable } from '@angular/core';
import { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';

import { AccountService } from '@app/_services';

@Injectable()
export class ErrorInterceptor implements HttpInterceptor {
    constructor(private accountService: AccountService) { }

    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
        return next.handle(request).pipe(catchError(err => {
            if ([401, 403].includes(err.status) && this.accountService.accountValue) {
                // auto logout if 401 or 403 response returned from api
                this.accountService.logout();
            }

            const error = (err && err.error && err.error.message) || err.statusText;
            console.error(err);
            return throwError(() => error);
        }))
    }
}

================================================================================
File: src\app\_helpers\fake-backend.ts
Size: 16.29 kB
================================================================================

﻿import { Injectable } from '@angular/core';
import { HttpRequest, HttpResponse, HttpHandler, HttpEvent, HttpInterceptor, HTTP_INTERCEPTORS } from '@angular/common/http';
import { Observable, of, throwError } from 'rxjs';
import { delay, materialize, dematerialize } from 'rxjs/operators';

import { AlertService } from '@app/_services';
import { Role } from '@app/_models';

// array in local storage for accounts
const accountsKey = 'angular-15-signup-verification-boilerplate-accounts';
let accounts: any[] = JSON.parse(localStorage.getItem(accountsKey)!) || [];

@Injectable()
export class FakeBackendInterceptor implements HttpInterceptor {
    constructor(private alertService: AlertService) { }

    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
        const { url, method, headers, body } = request;
        const alertService = this.alertService;

        return handleRoute();

        function handleRoute() {
            switch (true) {
                case url.endsWith('/accounts/authenticate') && method === 'POST':
                    return authenticate();
                case url.endsWith('/accounts/refresh-token') && method === 'POST':
                    return refreshToken();
                case url.endsWith('/accounts/revoke-token') && method === 'POST':
                    return revokeToken();
                case url.endsWith('/accounts/register') && method === 'POST':
                    return register();
                case url.endsWith('/accounts/verify-email') && method === 'POST':
                    return verifyEmail();
                case url.endsWith('/accounts/forgot-password') && method === 'POST':
                    return forgotPassword();
                case url.endsWith('/accounts/validate-reset-token') && method === 'POST':
                    return validateResetToken();
                case url.endsWith('/accounts/reset-password') && method === 'POST':
                    return resetPassword();
                case url.endsWith('/accounts') && method === 'GET':
                    return getAccounts();
                case url.match(/\/accounts\/\d+$/) && method === 'GET':
                    return getAccountById();
                case url.endsWith('/accounts') && method === 'POST':
                    return createAccount();
                case url.match(/\/accounts\/\d+$/) && method === 'PUT':
                    return updateAccount();
                case url.match(/\/accounts\/\d+$/) && method === 'DELETE':
                    return deleteAccount();
                default:
                    // pass through any requests not handled above
                    return next.handle(request);
            }    
        }

        // route functions

        function authenticate() {
            const { email, password } = body;
            const account = accounts.find(x => x.email === email && x.password === password && x.isVerified);
            
            if (!account) return error('Email or password is incorrect');

            // add refresh token to account
            account.refreshTokens.push(generateRefreshToken());
            localStorage.setItem(accountsKey, JSON.stringify(accounts));

            return ok({
                ...basicDetails(account),
                jwtToken: generateJwtToken(account)
            });
        }

        function refreshToken() {
            const refreshToken = getRefreshToken();
            
            if (!refreshToken) return unauthorized();

            const account = accounts.find(x => x.refreshTokens.includes(refreshToken));
            
            if (!account) return unauthorized();

            // replace old refresh token with a new one and save
            account.refreshTokens = account.refreshTokens.filter((x: any) => x !== refreshToken);
            account.refreshTokens.push(generateRefreshToken());
            localStorage.setItem(accountsKey, JSON.stringify(accounts));

            return ok({
                ...basicDetails(account),
                jwtToken: generateJwtToken(account)
            });
        }

        function revokeToken() {
            if (!isAuthenticated()) return unauthorized();
            
            const refreshToken = getRefreshToken();
            const account = accounts.find(x => x.refreshTokens.includes(refreshToken));
            
            // revoke token and save
            account.refreshTokens = account.refreshTokens.filter((x: any) => x !== refreshToken);
            localStorage.setItem(accountsKey, JSON.stringify(accounts));

            return ok();
        }

        function register() {
            const account = body;

            if (accounts.find(x => x.email === account.email)) {
                // display email already registered "email" in alert
                setTimeout(() => {
                    alertService.info(`
                        <h4>Email Already Registered</h4>
                        <p>Your email ${account.email} is already registered.</p>
                        <p>If you don't know your password please visit the <a href="${location.origin}/account/forgot-password">forgot password</a> page.</p>
                        <div><strong>NOTE:</strong> The fake backend displayed this "email" so you can test without an api. A real backend would send a real email.</div>
                    `, { autoClose: false });
                }, 1000);

                // always return ok() response to prevent email enumeration
                return ok();
            }

            // assign account id and a few other properties then save
            account.id = newAccountId();
            if (account.id === 1) {
                // first registered account is an admin
                account.role = Role.Admin;
            } else {
                account.role = Role.User;
            }
            account.dateCreated = new Date().toISOString();
            account.verificationToken = new Date().getTime().toString();
            account.isVerified = false;
            account.refreshTokens = [];
            delete account.confirmPassword;
            accounts.push(account);
            localStorage.setItem(accountsKey, JSON.stringify(accounts));

            // display verification email in alert
            setTimeout(() => {
                const verifyUrl = `${location.origin}/account/verify-email?token=${account.verificationToken}`;
                alertService.info(`
                    <h4>Verification Email</h4>
                    <p>Thanks for registering!</p>
                    <p>Please click the below link to verify your email address:</p>
                    <p><a href="${verifyUrl}">${verifyUrl}</a></p>
                    <div><strong>NOTE:</strong> The fake backend displayed this "email" so you can test without an api. A real backend would send a real email.</div>
                `, { autoClose: false });
            }, 1000);

            return ok();
        }
        
        function verifyEmail() {
            const { token } = body;
            const account = accounts.find(x => !!x.verificationToken && x.verificationToken === token);
            
            if (!account) return error('Verification failed');
            
            // set is verified flag to true if token is valid
            account.isVerified = true;
            localStorage.setItem(accountsKey, JSON.stringify(accounts));

            return ok();
        }

        function forgotPassword() {
            const { email } = body;
            const account = accounts.find(x => x.email === email);
            
            // always return ok() response to prevent email enumeration
            if (!account) return ok();
            
            // create reset token that expires after 24 hours
            account.resetToken = new Date().getTime().toString();
            account.resetTokenExpires = new Date(Date.now() + 24*60*60*1000).toISOString();
            localStorage.setItem(accountsKey, JSON.stringify(accounts));

            // display password reset email in alert
            setTimeout(() => {
                const resetUrl = `${location.origin}/account/reset-password?token=${account.resetToken}`;
                alertService.info(`
                    <h4>Reset Password Email</h4>
                    <p>Please click the below link to reset your password, the link will be valid for 1 day:</p>
                    <p><a href="${resetUrl}">${resetUrl}</a></p>
                    <div><strong>NOTE:</strong> The fake backend displayed this "email" so you can test without an api. A real backend would send a real email.</div>
                `, { autoClose: false });
            }, 1000);

            return ok();
        }
        
        function validateResetToken() {
            const { token } = body;
            const account = accounts.find(x =>
                !!x.resetToken && x.resetToken === token &&
                new Date() < new Date(x.resetTokenExpires)
            );
            
            if (!account) return error('Invalid token');
            
            return ok();
        }

        function resetPassword() {
            const { token, password } = body;
            const account = accounts.find(x =>
                !!x.resetToken && x.resetToken === token &&
                new Date() < new Date(x.resetTokenExpires)
            );
            
            if (!account) return error('Invalid token');
            
            // update password and remove reset token
            account.password = password;
            account.isVerified = true;
            delete account.resetToken;
            delete account.resetTokenExpires;
            localStorage.setItem(accountsKey, JSON.stringify(accounts));

            return ok();
        }

        function getAccounts() {
            if (!isAuthenticated()) return unauthorized();
            return ok(accounts.map(x => basicDetails(x)));
        }

        function getAccountById() {
            if (!isAuthenticated()) return unauthorized();

            let account = accounts.find(x => x.id === idFromUrl());

            // user accounts can get own profile and admin accounts can get all profiles
            if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {
                return unauthorized();
            }

            return ok(basicDetails(account));
        }

        function createAccount() {
            if (!isAuthorized(Role.Admin)) return unauthorized();

            const account = body;
            if (accounts.find(x => x.email === account.email)) {
                return error(`Email ${account.email} is already registered`);
            }

            // assign account id and a few other properties then save
            account.id = newAccountId();
            account.dateCreated = new Date().toISOString();
            account.isVerified = true;
            account.refreshTokens = [];
            delete account.confirmPassword;
            accounts.push(account);
            localStorage.setItem(accountsKey, JSON.stringify(accounts));

            return ok();
        }

        function updateAccount() {
            if (!isAuthenticated()) return unauthorized();

            let params = body;
            let account = accounts.find(x => x.id === idFromUrl());

            // user accounts can update own profile and admin accounts can update all profiles
            if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {
                return unauthorized();
            }

            // only update password if included
            if (!params.password) {
                delete params.password;
            }
            // don't save confirm password
            delete params.confirmPassword;

            // update and save account
            Object.assign(account, params);
            localStorage.setItem(accountsKey, JSON.stringify(accounts));

            return ok(basicDetails(account));
        }

        function deleteAccount() {
            if (!isAuthenticated()) return unauthorized();

            let account = accounts.find(x => x.id === idFromUrl());

            // user accounts can delete own account and admin accounts can delete any account
            if (account.id !== currentAccount().id && !isAuthorized(Role.Admin)) {
                return unauthorized();
            }

            // delete account then save
            accounts = accounts.filter(x => x.id !== idFromUrl());
            localStorage.setItem(accountsKey, JSON.stringify(accounts));
            return ok();
        }
        
        // helper functions

        function ok(body?: any) {
            return of(new HttpResponse({ status: 200, body }))
                .pipe(delay(500)); // delay observable to simulate server api call
        }

        function error(message: string) {
            return throwError(() => ({ error: { message } }))
                .pipe(materialize(), delay(500), dematerialize()); // call materialize and dematerialize to ensure delay even if an error is thrown (https://github.com/Reactive-Extensions/RxJS/issues/648);
        }

        function unauthorized() {
            return throwError(() => ({ status: 401, error: { message: 'Unauthorized' } }))
                .pipe(materialize(), delay(500), dematerialize());
        }

        function basicDetails(account: any) {
            const { id, title, firstName, lastName, email, role, dateCreated, isVerified } = account;
            return { id, title, firstName, lastName, email, role, dateCreated, isVerified };
        }

        function isAuthenticated() {
            return !!currentAccount();
        }

        function isAuthorized(role: any) {
            const account = currentAccount();
            if (!account) return false;
            return account.role === role;
        }

        function idFromUrl() {
            const urlParts = url.split('/');
            return parseInt(urlParts[urlParts.length - 1]);
        }

        function newAccountId() {
            return accounts.length ? Math.max(...accounts.map(x => x.id)) + 1 : 1;
        }

        function currentAccount() {
            // check if jwt token is in auth header
            const authHeader = headers.get('Authorization');
            if (!authHeader?.startsWith('Bearer fake-jwt-token')) return;

            // check if token is expired
            const jwtToken = JSON.parse(atob(authHeader.split('.')[1]));
            const tokenExpired = Date.now() > (jwtToken.exp * 1000);
            if (tokenExpired) return;

            const account = accounts.find(x => x.id === jwtToken.id);
            return account;
        }

        function generateJwtToken(account: any) {
            // create token that expires in 15 minutes
            const tokenPayload = { 
                exp: Math.round(new Date(Date.now() + 15*60*1000).getTime() / 1000),
                id: account.id
            }
            return `fake-jwt-token.${btoa(JSON.stringify(tokenPayload))}`;
        }

        function generateRefreshToken() {
            const token = new Date().getTime().toString();

            // add token cookie that expires in 7 days
            const expires = new Date(Date.now() + 7*24*60*60*1000).toUTCString();
            document.cookie = `fakeRefreshToken=${token}; expires=${expires}; path=/`;

            return token;
        }

        function getRefreshToken() {
            // get refresh token from cookie
            return (document.cookie.split(';').find(x => x.includes('fakeRefreshToken')) || '=').split('=')[1];
        }
    }
}

export let fakeBackendProvider = {
    // use fake backend in place of Http service for backend-less development
    provide: HTTP_INTERCEPTORS,
    useClass: FakeBackendInterceptor,
    multi: true
};

================================================================================
File: src\app\_helpers\index.ts
Size: 216 B
================================================================================

﻿export * from './app.initializer';
export * from './auth.guard';
export * from './error.interceptor';
export * from './fake-backend';
export * from './jwt.interceptor';
export * from './must-match.validator';

================================================================================
File: src\app\_helpers\jwt.interceptor.ts
Size: 1.02 kB
================================================================================

import { Injectable } from '@angular/core';
import { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';
import { Observable } from 'rxjs';

import { environment } from '@environments/environment';
import { AccountService } from '@app/_services';

@Injectable()
export class JwtInterceptor implements HttpInterceptor {
    constructor(private accountService: AccountService) { }

    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
        // add auth header with jwt if account is logged in and request is to the api url
        const account = this.accountService.accountValue;
        const isLoggedIn = account && account.jwtToken;
        const isApiUrl = request.url.startsWith(environment.apiUrl);
        if (isLoggedIn && isApiUrl) {
            request = request.clone({
                setHeaders: { Authorization: `Bearer ${account.jwtToken}` }
            });
        }

        return next.handle(request);
    }
}

================================================================================
File: src\app\_helpers\must-match.validator.ts
Size: 914 B
================================================================================

import { AbstractControl } from '@angular/forms';

// custom validator to check that two fields match
export function MustMatch(controlName: string, matchingControlName: string) {
    return (group: AbstractControl) => {
        const control = group.get(controlName);
        const matchingControl = group.get(matchingControlName);

        if (!control || !matchingControl) {
            return null;
        }

        // return if another validator has already found an error on the matchingControl
        if (matchingControl.errors && !matchingControl.errors.mustMatch) {
            return null;
        }

        // set error on matchingControl if validation fails
        if (control.value !== matchingControl.value) {
            matchingControl.setErrors({ mustMatch: true });
        } else {
            matchingControl.setErrors(null);
        }
        return null;
    }
}

================================================================================
File: src\app\_models\account.ts
Size: 235 B
================================================================================

﻿import { Role } from './role';

export class Account {
    id?: string;
    title?: string;
    firstName?: string;
    lastName?: string;
    email?: string;
    status?: string;
    role?: Role;
    jwtToken?: string;
}

================================================================================
File: src\app\_models\alert.ts
Size: 453 B
================================================================================

export class Alert {
    id?: string;
    type?: AlertType;
    message?: string;
    autoClose?: boolean;
    keepAfterRouteChange?: boolean;
    fade?: boolean;

    constructor(init?: Partial<Alert>) {
        Object.assign(this, init);
    }
}

export enum AlertType {
    Success,
    Error,
    Info,
    Warning
}

export class AlertOptions {
    id?: string;
    autoClose?: boolean;
    keepAfterRouteChange?: boolean;
}

================================================================================
File: src\app\_models\index.ts
Size: 82 B
================================================================================

﻿export * from './account';
export * from './alert';
export * from './role';


================================================================================
File: src\app\_models\role.ts
Size: 62 B
================================================================================

export enum Role {
    User = 'User',
    Admin = 'Admin'
}

================================================================================
File: src\app\_services\account.service.ts
Size: 4.27 kB
================================================================================

﻿import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject, Observable } from 'rxjs';
import { map, finalize } from 'rxjs/operators';

import { environment } from '@environments/environment';
import { Account } from '@app/_models';

const baseUrl = `${environment.apiUrl}/accounts`;

@Injectable({ providedIn: 'root' })
export class AccountService {
    private accountSubject: BehaviorSubject<Account | null>;
    public account: Observable<Account | null>;

    constructor(
        private router: Router,
        private http: HttpClient
    ) {
        this.accountSubject = new BehaviorSubject<Account | null>(null);
        this.account = this.accountSubject.asObservable();
    }

    public get accountValue() {
        return this.accountSubject.value;
    }

    login(email: string, password: string) {
        return this.http.post<any>(`${baseUrl}/authenticate`, { email, password }, { withCredentials: true })
            .pipe(map(account => {
                this.accountSubject.next(account);
                this.startRefreshTokenTimer();
                return account;
            }));
    }

    logout() {
        this.http.post<any>(`${baseUrl}/revoke-token`, {}, { withCredentials: true }).subscribe();
        this.stopRefreshTokenTimer();
        this.accountSubject.next(null);
        this.router.navigate(['/account/login']);
    }

    refreshToken() {
        return this.http.post<any>(`${baseUrl}/refresh-token`, {}, { withCredentials: true })
            .pipe(map((account) => {
                this.accountSubject.next(account);
                this.startRefreshTokenTimer();
                return account;
            }));
    }

    register(account: Account) {
        return this.http.post(`${baseUrl}/register`, account);
    }

    verifyEmail(token: string) {
        return this.http.post(`${baseUrl}/verify-email`, { token });
    }

    forgotPassword(email: string) {
        return this.http.post(`${baseUrl}/forgot-password`, { email });
    }

    validateResetToken(token: string) {
        return this.http.post(`${baseUrl}/validate-reset-token`, { token });
    }

    resetPassword(token: string, password: string, confirmPassword: string) {
        return this.http.post(`${baseUrl}/reset-password`, { token, password, confirmPassword });
    }

    getAll() {
        return this.http.get<Account[]>(baseUrl);
    }

    getById(id: string) {
        return this.http.get<Account>(`${baseUrl}/${id}`);
    }

    create(params: any) {
        return this.http.post(baseUrl, params);
    }

    update(id: string, params: any) {
        return this.http.put(`${baseUrl}/${id}`, params)
            .pipe(map((account: any) => {
                // update the current account if it was updated
                if (account.id === this.accountValue?.id) {
                    // publish updated account to subscribers
                    account = { ...this.accountValue, ...account };
                    this.accountSubject.next(account);
                }
                return account;
            }));
    }

    delete(id: string) {
        return this.http.delete(`${baseUrl}/${id}`)
            .pipe(finalize(() => {
                // auto logout if the logged in account was deleted
                if (id === this.accountValue?.id)
                    this.logout();
            }));
    }

    // helper methods

    private refreshTokenTimeout?: any;

    private startRefreshTokenTimer() {
        // parse json object from base64 encoded jwt token
        const jwtBase64 = this.accountValue!.jwtToken!.split('.')[1];
        const jwtToken = JSON.parse(atob(jwtBase64));

        // set a timeout to refresh the token a minute before it expires
        const expires = new Date(jwtToken.exp * 1000);
        const timeout = expires.getTime() - Date.now() - (60 * 1000);
        this.refreshTokenTimeout = setTimeout(() => this.refreshToken().subscribe(), timeout);
    }

    private stopRefreshTokenTimer() {
        clearTimeout(this.refreshTokenTimeout);
    }
}

================================================================================
File: src\app\_services\alert.service.ts
Size: 1.49 kB
================================================================================

﻿import { Injectable } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { filter } from 'rxjs/operators';

import { Alert, AlertOptions, AlertType } from '@app/_models';

@Injectable({ providedIn: 'root' })
export class AlertService {
    private subject = new Subject<Alert>();
    private defaultId = 'default-alert';

    // enable subscribing to alerts observable
    onAlert(id = this.defaultId): Observable<Alert> {
        return this.subject.asObservable().pipe(filter(x => x && x.id === id));
    }

    // convenience methods
    success(message: string, options?: AlertOptions) {
        this.alert(new Alert({ ...options, type: AlertType.Success, message }));
    }

    error(message: string, options?: AlertOptions) {
        this.alert(new Alert({ ...options, type: AlertType.Error, message }));
    }

    info(message: string, options?: AlertOptions) {
        this.alert(new Alert({ ...options, type: AlertType.Info, message }));
    }

    warn(message: string, options?: AlertOptions) {
        this.alert(new Alert({ ...options, type: AlertType.Warning, message }));
    }

    // core alert method
    alert(alert: Alert) {
        alert.id = alert.id || this.defaultId;
        alert.autoClose = (alert.autoClose === undefined ? true : alert.autoClose);
        this.subject.next(alert);
    }

    // clear alerts
    clear(id = this.defaultId) {
        this.subject.next(new Alert({ id }));
    }
}

================================================================================
File: src\app\_services\department.service.ts
Size: 2.2 kB
================================================================================

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { environment } from '../../environments/environment';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';

export interface Department {
  id?: number | string;
  name?: string;
  description?: string;
  employeeCounts?: Number;
  [k: string]: any;
}

@Injectable({ providedIn: 'root' })
export class DepartmentService {
  private readonly baseUrl: string;

  constructor(private http: HttpClient) {
    // Default to localhost:4000 if not configured in environment
    this.baseUrl = (environment && (environment as any).apiUrl)
      ? (environment as any).apiUrl.replace(/\/+$/, '')
      : 'http://localhost:4000';
  }

  private buildUrl(path: string = ''): string {
    const url = `${this.baseUrl}/departments${path}`;
    console.debug('[DepartmentService] ->', url);
    return url;
  }

  /** Get all departments */
  getAll(): Observable<Department[]> {
    return this.http.get<Department[]>(this.buildUrl())
      .pipe(catchError(this.handleError));
  }

  /** Get department by id */
  getById(id: string | number): Observable<Department> {
    return this.http.get<Department>(this.buildUrl(`/${id}`))
      .pipe(catchError(this.handleError));
  }

  /** Create a department */
  create(payload: Partial<Department>): Observable<Department> {
    return this.http.post<Department>(this.buildUrl(), payload)
      .pipe(catchError(this.handleError));
  }

  /** Update a department */
  update(id: string | number, payload: Partial<Department>): Observable<Department> {
    return this.http.put<Department>(this.buildUrl(`/${id}`), payload)
      .pipe(catchError(this.handleError));
  }

  /** Delete a department */
  delete(id: string | number): Observable<any> {
    return this.http.delete(this.buildUrl(`/${id}`))
      .pipe(catchError(this.handleError));
  }

  /** Shared error handler */
  private handleError(err: any) {
    console.error('[DepartmentService] Error:', err);
    const e = (err && err.error) ? err.error : err;
    return throwError(() => e);
  }
}


================================================================================
File: src\app\_services\employee.service.ts
Size: 4.06 kB
================================================================================

// src/app/_services/employee.service.ts
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { environment } from '../../environments/environment';
import { Observable, throwError } from 'rxjs';
import { catchError, tap } from 'rxjs/operators';

export interface Employee {
  EmployeeID?: string;          // generated EMP###
  id?: number | string;         // DB primary key (if separate)
  accountId?: number | string;  // linked account
  email?: string;
  position?: string;
  department?: string;
  hireDate?: string;            // yyyy-mm-dd
  status?: 'active' | 'inactive';
  [key: string]: any;
}

export type CreateEmployeePayload = Partial<Employee>;

@Injectable({ providedIn: 'root' })
export class EmployeeService {
  private baseUrl = environment?.apiUrl
    ? environment.apiUrl.replace(/\/+$/, '')
    : '';

  constructor(private http: HttpClient) {}

  private buildUrl(path: string): string {
    const p = path.startsWith('/') ? path : `/${path}`;
    if (!this.baseUrl) return p;
    return `${this.baseUrl}${p}`.replace(/\/\/+/g, '/').replace(':/', '://');
  }

  private buildHeaders(token?: string | null): HttpHeaders {
    let headers = new HttpHeaders({ 'Content-Type': 'application/json' });
    if (token) {
      headers = headers.set('Authorization', `Bearer ${token}`);
    }
    return headers;
  }

  private handleError = (err: any) => {
    const payload = err?.error ?? err;
    console.error('[EmployeeService] error:', payload);
    return throwError(() => payload);
  };

  /** Get all employees */
  getAll(params?: Record<string, any>): Observable<Employee[]> {
    let httpParams = new HttpParams();
    if (params) {
      Object.entries(params).forEach(([k, v]) => {
        if (v !== undefined && v !== null) {
          httpParams = httpParams.set(k, String(v));
        }
      });
    }
    const url = this.buildUrl('/employees');
    return this.http.get<Employee[]>(url, { params: httpParams }).pipe(
      tap(res => console.debug('[EmployeeService] getAll ->', res)),
      catchError(this.handleError)
    );
  }

  /** Get the next auto-generated EmployeeID (EMP###) */
  getNextId(): Observable<{ nextId: string }> {
    const url = this.buildUrl('/employees/next-id');
    return this.http.get<{ nextId: string }>(url).pipe(
      tap(res => console.debug('[EmployeeService] getNextId ->', res)),
      catchError(this.handleError)
    );
  }

  /** Create a new employee */
  create(payload: CreateEmployeePayload, token?: string | null): Observable<Employee> {
    const url = this.buildUrl('/employees');
    const headers = this.buildHeaders(token);
    return this.http.post<Employee>(url, payload, { headers }).pipe(
      tap(res => console.debug('[EmployeeService] create ->', res)),
      catchError(this.handleError)
    );
  }

  /** Get employee by ID */
  getById(id: string | number): Observable<Employee> {
    const url = this.buildUrl(`/employees/${id}`);
    return this.http.get<Employee>(url).pipe(
      tap(res => console.debug('[EmployeeService] getById ->', res)),
      catchError(this.handleError)
    );
  }

  /** Update employee */
  update(id: string | number, payload: Partial<Employee>, token?: string | null): Observable<Employee> {
    const url = this.buildUrl(`/employees/${id}`);
    const headers = this.buildHeaders(token);
    return this.http.put<Employee>(url, payload, { headers }).pipe(
      tap(res => console.debug('[EmployeeService] update ->', res)),
      catchError(this.handleError)
    );
  }

  /** Delete employee */
  delete(id: string | number, token?: string | null): Observable<any> {
    const url = this.buildUrl(`/employees/${id}`);
    const headers = this.buildHeaders(token);
    return this.http.delete(url, { headers }).pipe(
      tap(() => console.debug(`[EmployeeService] delete -> ${id}`)),
      catchError(this.handleError)
    );
  }
}


================================================================================
File: src\app\_services\index.ts
Size: 71 B
================================================================================

﻿export * from './account.service';
export * from './alert.service';

================================================================================
File: src\app\_services\request.service.ts
Size: 1.17 kB
================================================================================

// src/app/_services/request.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { RequestDto } from '../requests/request.model';

@Injectable({ providedIn: 'root' })
export class RequestService {
  private baseUrl = 'http://localhost:4000/requests';

  constructor(private http: HttpClient) {}

  // Get all requests
  getAll(): Observable<RequestDto[]> {
    return this.http.get<RequestDto[]>(this.baseUrl);
  }

  // Get single request by ID
  getById(id: number): Observable<RequestDto> {
    return this.http.get<RequestDto>(`${this.baseUrl}/${id}`);
  }

  // Create a new request
  create(payload: Partial<RequestDto>): Observable<RequestDto> {
    return this.http.post<RequestDto>(this.baseUrl, payload);
  }

  // Update an existing request
  update(id: number, payload: Partial<RequestDto>): Observable<RequestDto> {
    return this.http.put<RequestDto>(`${this.baseUrl}/${id}`, payload);
  }

  // Delete a request
  delete(id: number): Observable<void> {
    return this.http.delete<void>(`${this.baseUrl}/${id}`);
  }
}


================================================================================
File: src\app\_services\workflow.service.ts
Size: 1.98 kB
================================================================================

// src/app/_services/workflow.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { environment } from '@environments/environment';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

@Injectable({ providedIn: 'root' })
export class WorkflowService {
  private base = `${environment.apiUrl}/workflows`;

  constructor(private http: HttpClient) {}

  // Get all workflows (optionally filter by employeeId)
  getAll(employeeId?: string): Observable<any[]> {
    const options: any = { observe: 'body' as const };
    if (employeeId) options.params = { employeeId };

    return this.http.get<any>(this.base, options).pipe(
      map((res: any) => {
        const workflows = (res || []) as any[];
        return workflows.map((wf: any) => ({
          ...wf,
          details:
            typeof wf.details === 'object' && wf.details !== null
              ? JSON.stringify(wf.details)
              : wf.details
        }));
      })
    );
  }

  // Get single workflow by numeric id
  getById(id: number | string): Observable<any> {
    return this.http
      .get<any>(`${this.base}/${id}`, { observe: 'body' as const })
      .pipe(
        map((wf: any) => ({
          ...wf,
          details:
            typeof wf.details === 'object' && wf.details !== null
              ? JSON.stringify(wf.details)
              : wf.details
        }))
      );
  }

  // Update workflow (use PUT because your backend accepted PUT in Postman)
  update(id: number | string, body: any): Observable<any> {
    return this.http
      .put<any>(`${this.base}/${id}`, body, { observe: 'body' as const })
      .pipe(
        map((wf: any) => ({
          ...wf,
          details:
            typeof wf.details === 'object' && wf.details !== null
              ? JSON.stringify(wf.details)
              : wf.details
        }))
      );
  }
}


================================================================================
File: src\environments\environment.prod.ts
Size: 94 B
================================================================================

export const environment = {
    production: true,
    apiUrl: 'http://localhost:4000'
};


================================================================================
File: src\environments\environment.ts
Size: 718 B
================================================================================

// This file can be replaced during build by using the `fileReplacements` array.
// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.
// The list of file replacements can be found in `angular.json`.

export const environment = {
    production: false,
    apiUrl: 'http://localhost:4000'
};

/*
 * For easier debugging in development mode, you can import the following file
 * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
 *
 * This import should be commented out in production mode because it will have a negative impact
 * on performance if an error is thrown.
 */
// import 'zone.js/dist/zone-error';  // Included with Angular CLI.


================================================================================
File: src\index.html
Size: 503 B
================================================================================

<!DOCTYPE html>
<html>
<head>
    <base href="/" />
    <title>Angular 15 Auth Boilerplate - Sign Up with Verification, Login and Forgot Password</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- bootstrap css -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
    <app-root></app-root>

    <!-- credits -->
    <div class="text-center mt-4">
    </div>
</body>
</html>

================================================================================
File: src\main.ts
Size: 388 B
================================================================================

import { enableProdMode } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';
import { environment } from './environments/environment';

if (environment.production) {
    enableProdMode();
}

platformBrowserDynamic().bootstrapModule(AppModule)
    .catch(err => console.error(err));


================================================================================
File: src\polyfills.ts
Size: 2.39 kB
================================================================================

/**
 * This file includes polyfills needed by Angular and is loaded before the app.
 * You can add your own extra polyfills to this file.
 *
 * This file is divided into 2 sections:
 *   1. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.
 *   2. Application imports. Files imported after ZoneJS that should be loaded before your main
 *      file.
 *
 * The current setup is for so-called "evergreen" browsers; the last versions of browsers that
 * automatically update themselves. This includes recent versions of Safari, Chrome (including
 * Opera), Edge on the desktop, and iOS and Chrome on mobile.
 *
 * Learn more in https://angular.io/guide/browser-support
 */

/***************************************************************************************************
 * BROWSER POLYFILLS
 */

/**
 * By default, zone.js will patch all possible macroTask and DomEvents
 * user can disable parts of macroTask/DomEvents patch by setting following flags
 * because those flags need to be set before `zone.js` being loaded, and webpack
 * will put import in the top of bundle, so user need to create a separate file
 * in this directory (for example: zone-flags.ts), and put the following flags
 * into that file, and then add the following code before importing zone.js.
 * import './zone-flags';
 *
 * The flags allowed in zone-flags.ts are listed here.
 *
 * The following flags will work for all browsers.
 *
 * (window as any).__Zone_disable_requestAnimationFrame = true; // disable patch requestAnimationFrame
 * (window as any).__Zone_disable_on_property = true; // disable patch onProperty such as onclick
 * (window as any).__zone_symbol__UNPATCHED_EVENTS = ['scroll', 'mousemove']; // disable patch specified eventNames
 *
 *  in IE/Edge developer tools, the addEventListener will also be wrapped by zone.js
 *  with the following flag, it will bypass `zone.js` patch for IE/Edge
 *
 *  (window as any).__Zone_enable_cross_context_check = true;
 *
 */

/***************************************************************************************************
 * Zone JS is required by default for Angular itself.
 */
import 'zone.js';  // Included with Angular CLI.


/***************************************************************************************************
 * APPLICATION IMPORTS
 */


================================================================================
File: src\styles.less
Size: 357 B
================================================================================

/* You can add global styles to this file, and also import other style files */
.app-container {
    min-height: 320px;
}

.admin-nav {
    padding-top: 0;
    padding-bottom: 0;
    background-color: #e8e9ea;
    border-bottom: 1px solid #ccc;
}

.btn-delete-account {
    width: 40px;
    text-align: center;
    box-sizing: content-box;
}

================================================================================
File: src\test.ts
Size: 775 B
================================================================================

// This file is required by karma.conf.js and loads recursively all the .spec and framework files

import 'zone.js/testing';
import { getTestBed } from '@angular/core/testing';
import {
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting
} from '@angular/platform-browser-dynamic/testing';

declare const require: {
  context(path: string, deep?: boolean, filter?: RegExp): {
    <T>(id: string): T;
    keys(): string[];
  };
};

// First, initialize the Angular testing environment.
getTestBed().initTestEnvironment(
  BrowserDynamicTestingModule,
  platformBrowserDynamicTesting(),
);

// Then we find all the tests.
const context = require.context('./', true, /\.spec\.ts$/);
// And load the modules.
context.keys().forEach(context);


================================================================================
File: tsconfig.app.json
Size: 334 B
================================================================================

/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
    "extends": "./tsconfig.json",
    "compilerOptions": {
        "outDir": "./out-tsc/app",
        "types": []
    },
    "files": [
        "src/main.ts",
        "src/polyfills.ts"
    ],
    "include": [
        "src/**/*.d.ts"
    ]
}

================================================================================
File: tsconfig.json
Size: 1.18 kB
================================================================================

/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
    "compileOnSave": false,
    "compilerOptions": {
        "baseUrl": "./",
        "outDir": "./dist/out-tsc",
        "allowSyntheticDefaultImports": true,
        "forceConsistentCasingInFileNames": true,
        "strict": true,
        "noImplicitOverride": true,
        "noPropertyAccessFromIndexSignature": false,
        "noImplicitReturns": true,
        "noFallthroughCasesInSwitch": true,
        "sourceMap": true,
        "declaration": false,
        "downlevelIteration": true,
        "experimentalDecorators": true,
        "moduleResolution": "node",
        "importHelpers": true,
        "target": "es2020",
        "module": "es2020",
        "lib": [
            "es2020",
            "dom"
        ],
        "paths": {
            "@app/*": ["src/app/*"],
            "@environments/*": ["src/environments/*"]
        }
    },
    "angularCompilerOptions": {
        "enableI18nLegacyMessageIdFormat": false,
        "strictInjectionParameters": true,
        "strictInputAccessModifiers": true,
        "strictTemplates": true
    }
}

================================================================================
File: tsconfig.spec.json
Size: 397 B
================================================================================

/* To learn more about this file see: https://angular.io/config/tsconfig. */
{
    "extends": "./tsconfig.json",
    "compilerOptions": {
        "outDir": "./out-tsc/spec",
        "types": [
            "jasmine"
        ]
    },
    "files": [
        "src/test.ts",
        "src/polyfills.ts"
    ],
    "include": [
        "src/**/*.spec.ts",
        "src/**/*.d.ts"
    ]
}
